
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Apr 10 03:17:11 PDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Apr 10 03:17:11 PDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\315\000\002\123\002\000\002\005\004\000\002\002" +
    "\004\000\002\006\003\000\002\006\002\000\002\007\003" +
    "\000\002\007\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\124\002\000\002\012\010\000\002\125" +
    "\002\000\002\013\011\000\002\126\002\000\002\013\011" +
    "\000\002\127\002\000\002\014\012\000\002\037\003\000" +
    "\002\037\002\000\002\130\002\000\002\131\002\000\002" +
    "\132\002\000\002\015\015\000\002\111\003\000\002\111" +
    "\004\000\002\056\006\000\002\114\003\000\002\114\002" +
    "\000\002\115\003\000\002\115\004\000\002\067\003\000" +
    "\002\067\003\000\002\133\002\000\002\134\002\000\002" +
    "\065\013\000\002\135\002\000\002\066\012\000\002\113" +
    "\003\000\002\113\002\000\002\112\003\000\002\112\004" +
    "\000\002\064\003\000\002\136\002\000\002\137\002\000" +
    "\002\140\002\000\002\063\020\000\002\141\002\000\002" +
    "\142\002\000\002\011\015\000\002\075\003\000\002\075" +
    "\003\000\002\076\003\000\002\076\004\000\002\073\004" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\074\003\000\002\077\003\000\002\077\003\000\002" +
    "\120\003\000\002\120\002\000\002\121\003\000\002\121" +
    "\004\000\002\100\003\000\002\107\003\000\002\107\002" +
    "\000\002\110\003\000\002\110\004\000\002\143\002\000" +
    "\002\053\006\000\002\144\002\000\002\145\002\000\002" +
    "\017\007\000\002\105\003\000\002\105\002\000\002\106" +
    "\003\000\002\106\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\101\003\000\002\101\002\000\002\102\003\000" +
    "\002\102\005\000\002\055\006\000\002\040\003\000\002" +
    "\040\002\000\002\054\004\000\002\054\002\000\002\116" +
    "\003\000\002\116\002\000\002\146\002\000\002\117\007" +
    "\000\002\147\002\000\002\003\007\000\002\150\002\000" +
    "\002\004\006\000\002\151\002\000\002\152\002\000\002" +
    "\020\010\000\002\021\004\000\002\021\002\000\002\153" +
    "\002\000\002\154\002\000\002\023\007\000\002\155\002" +
    "\000\002\022\014\000\002\156\002\000\002\024\005\000" +
    "\002\157\002\000\002\025\005\000\002\160\002\000\002" +
    "\071\010\000\002\161\002\000\002\026\005\000\002\162" +
    "\002\000\002\026\006\000\002\027\006\000\002\030\006" +
    "\000\002\122\003\000\002\122\005\000\002\070\003\000" +
    "\002\070\003\000\002\057\003\000\002\103\003\000\002" +
    "\103\002\000\002\104\003\000\002\104\005\000\002\036" +
    "\003\000\002\036\003\000\002\041\005\000\002\041\003" +
    "\000\002\042\005\000\002\042\003\000\002\043\005\000" +
    "\002\043\003\000\002\044\005\000\002\044\003\000\002" +
    "\045\005\000\002\045\003\000\002\046\005\000\002\046" +
    "\003\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\003\000\002\051\005\000\002\051\003\000" +
    "\002\052\005\000\002\052\003\000\002\034\003\000\002" +
    "\034\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\035\003\000\002\035\003\000\002\060\004\000\002" +
    "\060\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\006\000\002\060\007\000\002\060\006\000\002\060\004" +
    "\000\002\060\003\000\002\061\005\000\002\061\006\000" +
    "\002\061\005\000\002\061\004\000\002\061\006\000\002" +
    "\061\003\000\002\062\005\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\004\000" +
    "\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014e\000\026\002\001\013\001\022\001\031\001\033" +
    "\001\035\001\041\001\072\001\103\001\105\001\001\002" +
    "\000\004\002\u0150\001\002\000\026\002\ufffd\013\uffeb\022" +
    "\uffeb\031\007\033\uffeb\035\011\041\uffeb\072\012\103\uffeb" +
    "\105\015\001\002\000\026\002\ufff6\013\ufff6\022\ufff6\031" +
    "\ufff6\033\ufff6\035\ufff6\041\ufff6\072\ufff6\103\ufff6\105\ufff6" +
    "\001\002\000\012\013\032\033\034\035\u0141\041\035\001" +
    "\002\000\026\002\ufff7\013\ufff7\022\ufff7\031\ufff7\033\ufff7" +
    "\035\ufff7\041\ufff7\072\ufff7\103\ufff7\105\ufff7\001\002\000" +
    "\004\017\u0132\001\002\000\004\103\247\001\002\000\014" +
    "\013\032\022\033\033\034\041\035\103\030\001\002\000" +
    "\026\002\ufff9\013\ufff9\022\ufff9\031\ufff9\033\ufff9\035\ufff9" +
    "\041\ufff9\072\ufff9\103\ufff9\105\ufff9\001\002\000\014\013" +
    "\uffec\022\uffec\033\uffec\041\uffec\103\uffec\001\002\000\026" +
    "\002\ufffc\013\ufffc\022\ufffc\031\ufffc\033\ufffc\035\ufffc\041" +
    "\ufffc\072\ufffc\103\ufffc\105\ufffc\001\002\000\026\002\ufff5" +
    "\013\ufff5\022\ufff5\031\ufff5\033\ufff5\035\ufff5\041\ufff5\072" +
    "\ufff5\103\ufff5\105\ufff5\001\002\000\026\002\ufffe\013\uffeb" +
    "\022\uffeb\031\007\033\uffeb\035\011\041\uffeb\072\012\103" +
    "\uffeb\105\015\001\002\000\026\002\ufffa\013\ufffa\022\ufffa" +
    "\031\ufffa\033\ufffa\035\ufffa\041\ufffa\072\ufffa\103\ufffa\105" +
    "\ufffa\001\002\000\004\002\000\001\002\000\026\002\ufff8" +
    "\013\ufff8\022\ufff8\031\ufff8\033\ufff8\035\ufff8\041\ufff8\072" +
    "\ufff8\103\ufff8\105\ufff8\001\002\000\026\002\ufffb\013\ufffb" +
    "\022\ufffb\031\ufffb\033\ufffb\035\ufffb\041\ufffb\072\ufffb\103" +
    "\ufffb\105\ufffb\001\002\000\012\006\uffca\044\uffca\065\uffca" +
    "\104\uffca\001\002\000\004\104\240\001\002\000\014\006" +
    "\uffc0\044\uffc0\065\uffc0\071\114\104\uffc0\001\002\000\014" +
    "\006\uffc4\044\uffc4\065\uffc4\071\uffc4\104\uffc4\001\002\000" +
    "\006\071\114\104\223\001\002\000\014\006\uffc5\044\uffc5" +
    "\065\uffc5\071\uffc5\104\uffc5\001\002\000\010\013\032\033" +
    "\034\041\035\001\002\000\014\006\uffc6\044\uffc6\065\uffc6" +
    "\071\uffc6\104\uffc6\001\002\000\014\006\uffc7\044\uffc7\065" +
    "\uffc7\071\uffc7\104\uffc7\001\002\000\004\104\037\001\002" +
    "\000\004\011\040\001\002\000\046\006\071\020\100\032" +
    "\065\045\073\050\064\051\074\054\061\055\101\060\076" +
    "\061\063\067\067\071\102\073\060\075\052\100\077\101" +
    "\062\102\044\104\070\001\002\000\060\006\uff5b\007\uff5b" +
    "\011\221\012\uff5b\015\uff5b\021\uff5b\027\uff5b\036\uff5b\037" +
    "\uff5b\043\uff5b\046\uff5b\047\uff5b\050\uff5b\052\uff5b\053\uff5b" +
    "\056\uff5b\057\uff5b\060\uff5b\063\uff5b\065\uff5b\066\uff5b\070" +
    "\uff5b\071\uff5b\001\002\000\056\006\uff5d\007\uff5d\012\uff5d" +
    "\015\uff5d\021\uff5d\027\uff5d\036\uff5d\037\uff5d\043\uff5d\046" +
    "\uff5d\047\uff5d\050\uff5d\052\173\053\uff5d\056\uff5d\057\uff5d" +
    "\060\uff5d\063\uff5d\065\uff5d\066\uff5d\070\175\071\174\001" +
    "\002\000\050\006\uff5f\007\uff5f\012\uff5f\015\uff5f\021\uff5f" +
    "\027\uff5f\036\uff5f\037\uff5f\043\uff5f\046\uff5f\047\uff5f\050" +
    "\167\053\uff5f\056\uff5f\057\uff5f\060\170\063\uff5f\065\uff5f" +
    "\066\uff5f\001\002\000\076\006\uff3b\007\uff3b\010\uff3b\011" +
    "\uff3b\012\uff3b\015\uff3b\017\uff3b\021\uff3b\025\uff3b\027\uff3b" +
    "\036\uff3b\037\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b\047" +
    "\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\056\uff3b\057\uff3b" +
    "\060\uff3b\061\uff3b\063\uff3b\065\uff3b\066\uff3b\070\uff3b\071" +
    "\uff3b\001\002\000\044\006\uff61\007\uff61\012\uff61\015\uff61" +
    "\021\uff61\027\uff61\036\165\037\161\043\uff61\046\163\047" +
    "\162\053\uff61\056\uff61\057\uff61\063\uff61\065\uff61\066\uff61" +
    "\001\002\000\076\006\uff3f\007\uff3f\010\uff3f\011\uff3f\012" +
    "\uff3f\015\uff3f\017\uff3f\021\uff3f\025\uff3f\027\uff3f\036\uff3f" +
    "\037\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f\050" +
    "\uff3f\051\uff3f\052\uff3f\053\uff3f\056\uff3f\057\uff3f\060\uff3f" +
    "\061\uff3f\063\uff3f\065\uff3f\066\uff3f\070\uff3f\071\uff3f\001" +
    "\002\000\034\006\uff63\007\uff63\012\uff63\015\uff63\021\uff63" +
    "\027\157\043\uff63\053\156\056\uff63\057\uff63\063\uff63\065" +
    "\uff63\066\uff63\001\002\000\030\006\153\007\uff65\012\uff65" +
    "\015\uff65\021\uff65\043\uff65\056\uff65\057\uff65\063\uff65\065" +
    "\uff65\066\uff65\001\002\000\076\006\uff45\007\uff45\010\205" +
    "\011\uff45\012\uff45\015\uff45\017\uff45\021\uff45\025\206\027" +
    "\uff45\036\uff45\037\uff45\043\uff45\044\202\045\203\046\uff45" +
    "\047\uff45\050\uff45\051\074\052\uff45\053\uff45\056\uff45\057" +
    "\uff45\060\uff45\061\063\063\uff45\065\uff45\066\uff45\070\uff45" +
    "\071\uff45\001\002\000\076\006\uff3a\007\uff3a\010\uff3a\011" +
    "\uff3a\012\uff3a\015\uff3a\017\uff3a\021\uff3a\025\uff3a\027\uff3a" +
    "\036\uff3a\037\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047" +
    "\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\056\uff3a\057\uff3a" +
    "\060\uff3a\061\uff3a\063\uff3a\065\uff3a\066\uff3a\070\uff3a\071" +
    "\uff3a\001\002\000\004\066\uffee\001\002\000\026\007\uff67" +
    "\012\uff67\015\151\021\uff67\043\uff67\056\uff67\057\uff67\063" +
    "\uff67\065\uff67\066\uff67\001\002\000\024\007\uff69\012\147" +
    "\021\uff69\043\uff69\056\uff69\057\uff69\063\uff69\065\uff69\066" +
    "\uff69\001\002\000\022\007\145\021\uff6b\043\uff6b\056\uff6b" +
    "\057\uff6b\063\uff6b\065\uff6b\066\uff6b\001\002\000\020\021" +
    "\uff6d\043\uff6d\056\142\057\uff6d\063\uff6d\065\uff6d\066\uff6d" +
    "\001\002\000\076\006\uff37\007\uff37\010\uff37\011\uff37\012" +
    "\uff37\015\uff37\017\uff37\021\uff37\025\uff37\027\uff37\036\uff37" +
    "\037\uff37\043\uff37\044\uff37\045\uff37\046\uff37\047\uff37\050" +
    "\uff37\051\uff37\052\uff37\053\uff37\056\uff37\057\uff37\060\uff37" +
    "\061\uff37\063\uff37\065\uff37\066\uff37\070\uff37\071\uff37\001" +
    "\002\000\046\006\071\020\100\032\065\045\073\050\064" +
    "\051\074\054\061\055\101\060\076\061\063\067\067\071" +
    "\102\073\060\075\052\100\077\101\062\102\044\104\070" +
    "\001\002\000\076\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012" +
    "\uff3d\015\uff3d\017\uff3d\021\uff3d\025\uff3d\027\uff3d\036\uff3d" +
    "\037\uff3d\043\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050" +
    "\uff3d\051\uff3d\052\uff3d\053\uff3d\056\uff3d\057\uff3d\060\uff3d" +
    "\061\uff3d\063\uff3d\065\uff3d\066\uff3d\070\uff3d\071\uff3d\001" +
    "\002\000\124\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f" +
    "\015\uff4f\017\uff4f\020\uff4f\021\uff4f\025\uff4f\027\uff4f\032" +
    "\uff4f\036\uff4f\037\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f" +
    "\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055" +
    "\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\063\uff4f\065\uff4f" +
    "\066\uff4f\067\uff4f\070\uff4f\071\uff4f\073\uff4f\075\uff4f\100" +
    "\uff4f\101\uff4f\102\uff4f\104\uff4f\001\002\000\046\006\uff6f" +
    "\020\uff6f\032\uff6f\045\uff6f\050\uff6f\051\uff6f\054\uff6f\055" +
    "\uff6f\060\uff6f\061\uff6f\067\uff6f\071\uff6f\073\uff6f\075\uff6f" +
    "\100\uff6f\101\uff6f\102\uff6f\104\uff6f\001\002\000\076\006" +
    "\uff39\007\uff39\010\uff39\011\uff39\012\uff39\015\uff39\017\uff39" +
    "\021\uff39\025\uff39\027\uff39\036\uff39\037\uff39\043\uff39\044" +
    "\uff39\045\uff39\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39" +
    "\053\uff39\056\uff39\057\uff39\060\uff39\061\uff39\063\uff39\065" +
    "\uff39\066\uff39\070\uff39\071\uff39\001\002\000\006\063\uff75" +
    "\066\uff75\001\002\000\004\045\122\001\002\000\076\006" +
    "\uff35\007\uff35\010\uff35\011\uff35\012\uff35\015\uff35\017\uff35" +
    "\021\uff35\025\uff35\027\uff35\036\uff35\037\uff35\043\uff35\044" +
    "\uff35\045\uff35\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35" +
    "\053\uff35\056\uff35\057\uff35\060\uff35\061\uff35\063\uff35\065" +
    "\uff35\066\uff35\070\uff35\071\uff35\001\002\000\046\006\071" +
    "\020\100\032\065\045\073\050\064\051\074\054\061\055" +
    "\101\060\076\061\063\067\067\071\102\073\060\075\052" +
    "\100\077\101\062\102\044\104\070\001\002\000\046\006" +
    "\071\020\100\032\065\045\073\050\064\051\074\054\061" +
    "\055\101\060\076\061\063\067\067\071\102\073\060\075" +
    "\052\100\077\101\062\102\044\104\070\001\002\000\056" +
    "\006\071\013\032\020\100\032\065\033\034\041\035\045" +
    "\073\050\064\051\074\054\061\055\101\060\076\061\063" +
    "\067\067\071\102\073\060\075\052\100\077\101\062\102" +
    "\044\103\030\104\070\001\002\000\124\006\uff4e\007\uff4e" +
    "\010\uff4e\011\uff4e\012\uff4e\015\uff4e\017\uff4e\020\uff4e\021" +
    "\uff4e\025\uff4e\027\uff4e\032\uff4e\036\uff4e\037\uff4e\043\uff4e" +
    "\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e" +
    "\061\uff4e\063\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071" +
    "\uff4e\073\uff4e\075\uff4e\100\uff4e\101\uff4e\102\uff4e\104\uff4e" +
    "\001\002\000\046\006\071\020\100\032\065\045\073\050" +
    "\064\051\074\054\061\055\101\060\076\061\063\067\067" +
    "\071\102\073\060\075\052\100\077\101\062\102\044\104" +
    "\070\001\002\000\046\006\uff70\020\uff70\032\uff70\045\uff70" +
    "\050\uff70\051\uff70\054\uff70\055\uff70\060\uff70\061\uff70\067" +
    "\uff70\071\uff70\073\uff70\075\uff70\100\uff70\101\uff70\102\uff70" +
    "\104\uff70\001\002\000\076\006\uff3c\007\uff3c\010\uff3c\011" +
    "\uff3c\012\uff3c\015\uff3c\017\uff3c\021\uff3c\025\uff3c\027\uff3c" +
    "\036\uff3c\037\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047" +
    "\uff3c\050\uff3c\051\uff3c\052\uff3c\053\uff3c\056\uff3c\057\uff3c" +
    "\060\uff3c\061\uff3c\063\uff3c\065\uff3c\066\uff3c\070\uff3c\071" +
    "\uff3c\001\002\000\004\104\104\001\002\000\076\006\uff38" +
    "\007\uff38\010\uff38\011\uff38\012\uff38\015\uff38\017\uff38\021" +
    "\uff38\025\uff38\027\uff38\036\uff38\037\uff38\043\uff38\044\uff38" +
    "\045\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38\053" +
    "\uff38\056\uff38\057\uff38\060\uff38\061\uff38\063\uff38\065\uff38" +
    "\066\uff38\070\uff38\071\uff38\001\002\000\046\006\071\020" +
    "\100\032\065\045\073\050\064\051\074\054\061\055\101" +
    "\060\076\061\063\067\067\071\102\073\060\075\052\100" +
    "\077\101\062\102\044\104\070\001\002\000\062\006\uff4d" +
    "\007\uff4d\011\uff4d\012\uff4d\015\uff4d\017\uff4d\021\uff4d\027" +
    "\uff4d\036\uff4d\037\uff4d\043\uff4d\046\uff4d\047\uff4d\050\uff4d" +
    "\052\uff4d\053\uff4d\056\uff4d\057\uff4d\060\uff4d\063\uff4d\065" +
    "\uff4d\066\uff4d\070\uff4d\071\uff4d\001\002\000\076\006\uff36" +
    "\007\uff36\010\uff36\011\uff36\012\uff36\015\uff36\017\uff36\021" +
    "\uff36\025\uff36\027\uff36\036\uff36\037\uff36\043\uff36\044\uff36" +
    "\045\uff36\046\uff36\047\uff36\050\uff36\051\uff36\052\uff36\053" +
    "\uff36\056\uff36\057\uff36\060\uff36\061\uff36\063\uff36\065\uff36" +
    "\066\uff36\070\uff36\071\uff36\001\002\000\062\006\uff4b\007" +
    "\uff4b\011\uff4b\012\uff4b\015\uff4b\017\uff4b\021\uff4b\027\uff4b" +
    "\036\uff4b\037\uff4b\043\uff4b\046\uff4b\047\uff4b\050\uff4b\052" +
    "\uff4b\053\uff4b\056\uff4b\057\uff4b\060\uff4b\063\uff4b\065\uff4b" +
    "\066\uff4b\070\uff4b\071\uff4b\001\002\000\004\071\114\001" +
    "\002\000\004\065\112\001\002\000\004\065\111\001\002" +
    "\000\076\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\015" +
    "\uff3e\017\uff3e\021\uff3e\025\uff3e\027\uff3e\036\uff3e\037\uff3e" +
    "\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051" +
    "\uff3e\052\uff3e\053\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e" +
    "\063\uff3e\065\uff3e\066\uff3e\070\uff3e\071\uff3e\001\002\000" +
    "\046\006\071\020\100\032\065\045\073\050\064\051\074" +
    "\054\061\055\101\060\076\061\063\067\067\071\102\073" +
    "\060\075\052\100\077\101\062\102\044\104\070\001\002" +
    "\000\062\006\uff47\007\uff47\011\uff47\012\uff47\015\uff47\017" +
    "\uff47\021\uff47\027\uff47\036\uff47\037\uff47\043\uff47\046\uff47" +
    "\047\uff47\050\uff47\052\uff47\053\uff47\056\uff47\057\uff47\060" +
    "\uff47\063\uff47\065\uff47\066\uff47\070\uff47\071\uff47\001\002" +
    "\000\014\006\uffbd\044\uffbd\065\uffbd\071\uffbd\104\uffbd\001" +
    "\002\000\014\006\uffc9\044\uffc9\065\uffc9\071\114\104\uffc9" +
    "\001\002\000\014\006\uffbf\044\uffbf\065\uffbf\071\uffbf\104" +
    "\uffbf\001\002\000\014\006\uffbe\044\uffbe\065\uffbe\071\uffbe" +
    "\104\uffbe\001\002\000\062\006\uff46\007\uff46\011\uff46\012" +
    "\uff46\015\uff46\017\uff46\021\uff46\027\uff46\036\uff46\037\uff46" +
    "\043\uff46\046\uff46\047\uff46\050\uff46\052\uff46\053\uff46\056" +
    "\uff46\057\uff46\060\uff46\063\uff46\065\uff46\066\uff46\070\uff46" +
    "\071\uff46\001\002\000\062\006\uff4c\007\uff4c\011\uff4c\012" +
    "\uff4c\015\uff4c\017\uff4c\021\uff4c\027\uff4c\036\uff4c\037\uff4c" +
    "\043\uff4c\046\uff4c\047\uff4c\050\uff4c\052\uff4c\053\uff4c\056" +
    "\uff4c\057\uff4c\060\uff4c\063\uff4c\065\uff4c\066\uff4c\070\uff4c" +
    "\071\uff4c\001\002\000\056\006\071\013\032\020\100\032" +
    "\065\033\034\041\035\045\073\050\064\051\074\054\061" +
    "\055\101\060\076\061\063\067\067\071\102\073\060\075" +
    "\052\100\077\101\062\102\044\103\030\104\070\001\002" +
    "\000\004\065\140\001\002\000\014\006\uffcb\044\uffcb\065" +
    "\uffcb\071\114\104\uffcb\001\002\000\006\044\131\065\uffbb" +
    "\001\002\000\012\006\uffcc\044\uffcc\065\uffcc\104\uffcc\001" +
    "\002\000\016\011\uffbc\017\uffbc\021\uffbc\044\131\065\uffbc" +
    "\066\uffbc\001\002\000\004\065\136\001\002\000\046\006" +
    "\071\020\100\032\065\045\073\050\064\051\074\054\061" +
    "\055\101\060\076\061\063\067\067\071\102\073\060\075" +
    "\052\100\077\101\062\102\044\104\070\001\002\000\016" +
    "\011\uffba\017\uffba\021\uffba\044\uffba\065\uffba\066\uffba\001" +
    "\002\000\004\063\uffb8\001\002\000\004\063\135\001\002" +
    "\000\016\011\uffb7\017\uffb7\021\uffb7\044\uffb7\065\uffb7\066" +
    "\uffb7\001\002\000\062\006\uff48\007\uff48\011\uff48\012\uff48" +
    "\015\uff48\017\uff48\021\uff48\027\uff48\036\uff48\037\uff48\043" +
    "\uff48\046\uff48\047\uff48\050\uff48\052\uff48\053\uff48\056\uff48" +
    "\057\uff48\060\uff48\063\uff48\065\uff48\066\uff48\070\uff48\071" +
    "\uff48\001\002\000\016\011\uffb9\017\uffb9\021\uffb9\044\uffb9" +
    "\065\uffb9\066\uffb9\001\002\000\062\006\uff49\007\uff49\011" +
    "\uff49\012\uff49\015\uff49\017\uff49\021\uff49\027\uff49\036\uff49" +
    "\037\uff49\043\uff49\046\uff49\047\uff49\050\uff49\052\uff49\053" +
    "\uff49\056\uff49\057\uff49\060\uff49\063\uff49\065\uff49\066\uff49" +
    "\070\uff49\071\uff49\001\002\000\062\006\uff4a\007\uff4a\011" +
    "\uff4a\012\uff4a\015\uff4a\017\uff4a\021\uff4a\027\uff4a\036\uff4a" +
    "\037\uff4a\043\uff4a\046\uff4a\047\uff4a\050\uff4a\052\uff4a\053" +
    "\uff4a\056\uff4a\057\uff4a\060\uff4a\063\uff4a\065\uff4a\066\uff4a" +
    "\070\uff4a\071\uff4a\001\002\000\046\006\071\020\100\032" +
    "\065\045\073\050\064\051\074\054\061\055\101\060\076" +
    "\061\063\067\067\071\102\073\060\075\052\100\077\101" +
    "\062\102\044\104\070\001\002\000\056\006\uff5b\007\uff5b" +
    "\012\uff5b\015\uff5b\021\uff5b\027\uff5b\036\uff5b\037\uff5b\043" +
    "\uff5b\046\uff5b\047\uff5b\050\uff5b\052\uff5b\053\uff5b\056\uff5b" +
    "\057\uff5b\060\uff5b\063\uff5b\065\uff5b\066\uff5b\070\uff5b\071" +
    "\uff5b\001\002\000\022\007\145\021\uff6c\043\uff6c\056\uff6c" +
    "\057\uff6c\063\uff6c\065\uff6c\066\uff6c\001\002\000\046\006" +
    "\071\020\100\032\065\045\073\050\064\051\074\054\061" +
    "\055\101\060\076\061\063\067\067\071\102\073\060\075" +
    "\052\100\077\101\062\102\044\104\070\001\002\000\024" +
    "\007\uff6a\012\147\021\uff6a\043\uff6a\056\uff6a\057\uff6a\063" +
    "\uff6a\065\uff6a\066\uff6a\001\002\000\046\006\071\020\100" +
    "\032\065\045\073\050\064\051\074\054\061\055\101\060" +
    "\076\061\063\067\067\071\102\073\060\075\052\100\077" +
    "\101\062\102\044\104\070\001\002\000\026\007\uff68\012" +
    "\uff68\015\151\021\uff68\043\uff68\056\uff68\057\uff68\063\uff68" +
    "\065\uff68\066\uff68\001\002\000\046\006\071\020\100\032" +
    "\065\045\073\050\064\051\074\054\061\055\101\060\076" +
    "\061\063\067\067\071\102\073\060\075\052\100\077\101" +
    "\062\102\044\104\070\001\002\000\030\006\153\007\uff66" +
    "\012\uff66\015\uff66\021\uff66\043\uff66\056\uff66\057\uff66\063" +
    "\uff66\065\uff66\066\uff66\001\002\000\046\006\071\020\100" +
    "\032\065\045\073\050\064\051\074\054\061\055\101\060" +
    "\076\061\063\067\067\071\102\073\060\075\052\100\077" +
    "\101\062\102\044\104\070\001\002\000\034\006\uff64\007" +
    "\uff64\012\uff64\015\uff64\021\uff64\027\157\043\uff64\053\156" +
    "\056\uff64\057\uff64\063\uff64\065\uff64\066\uff64\001\002\000" +
    "\046\006\071\020\100\032\065\045\073\050\064\051\074" +
    "\054\061\055\101\060\076\061\063\067\067\071\102\073" +
    "\060\075\052\100\077\101\062\102\044\104\070\001\002" +
    "\000\046\006\uff59\020\uff59\032\uff59\045\uff59\050\uff59\051" +
    "\uff59\054\uff59\055\uff59\060\uff59\061\uff59\067\uff59\071\uff59" +
    "\073\uff59\075\uff59\100\uff59\101\uff59\102\uff59\104\uff59\001" +
    "\002\000\046\006\uff5a\020\uff5a\032\uff5a\045\uff5a\050\uff5a" +
    "\051\uff5a\054\uff5a\055\uff5a\060\uff5a\061\uff5a\067\uff5a\071" +
    "\uff5a\073\uff5a\075\uff5a\100\uff5a\101\uff5a\102\uff5a\104\uff5a" +
    "\001\002\000\044\006\uff62\007\uff62\012\uff62\015\uff62\021" +
    "\uff62\027\uff62\036\165\037\161\043\uff62\046\163\047\162" +
    "\053\uff62\056\uff62\057\uff62\063\uff62\065\uff62\066\uff62\001" +
    "\002\000\046\006\uff55\020\uff55\032\uff55\045\uff55\050\uff55" +
    "\051\uff55\054\uff55\055\uff55\060\uff55\061\uff55\067\uff55\071" +
    "\uff55\073\uff55\075\uff55\100\uff55\101\uff55\102\uff55\104\uff55" +
    "\001\002\000\046\006\uff56\020\uff56\032\uff56\045\uff56\050" +
    "\uff56\051\uff56\054\uff56\055\uff56\060\uff56\061\uff56\067\uff56" +
    "\071\uff56\073\uff56\075\uff56\100\uff56\101\uff56\102\uff56\104" +
    "\uff56\001\002\000\046\006\uff58\020\uff58\032\uff58\045\uff58" +
    "\050\uff58\051\uff58\054\uff58\055\uff58\060\uff58\061\uff58\067" +
    "\uff58\071\uff58\073\uff58\075\uff58\100\uff58\101\uff58\102\uff58" +
    "\104\uff58\001\002\000\046\006\071\020\100\032\065\045" +
    "\073\050\064\051\074\054\061\055\101\060\076\061\063" +
    "\067\067\071\102\073\060\075\052\100\077\101\062\102" +
    "\044\104\070\001\002\000\046\006\uff57\020\uff57\032\uff57" +
    "\045\uff57\050\uff57\051\uff57\054\uff57\055\uff57\060\uff57\061" +
    "\uff57\067\uff57\071\uff57\073\uff57\075\uff57\100\uff57\101\uff57" +
    "\102\uff57\104\uff57\001\002\000\050\006\uff60\007\uff60\012" +
    "\uff60\015\uff60\021\uff60\027\uff60\036\uff60\037\uff60\043\uff60" +
    "\046\uff60\047\uff60\050\167\053\uff60\056\uff60\057\uff60\060" +
    "\170\063\uff60\065\uff60\066\uff60\001\002\000\046\006\uff53" +
    "\020\uff53\032\uff53\045\uff53\050\uff53\051\uff53\054\uff53\055" +
    "\uff53\060\uff53\061\uff53\067\uff53\071\uff53\073\uff53\075\uff53" +
    "\100\uff53\101\uff53\102\uff53\104\uff53\001\002\000\046\006" +
    "\uff54\020\uff54\032\uff54\045\uff54\050\uff54\051\uff54\054\uff54" +
    "\055\uff54\060\uff54\061\uff54\067\uff54\071\uff54\073\uff54\075" +
    "\uff54\100\uff54\101\uff54\102\uff54\104\uff54\001\002\000\046" +
    "\006\071\020\100\032\065\045\073\050\064\051\074\054" +
    "\061\055\101\060\076\061\063\067\067\071\102\073\060" +
    "\075\052\100\077\101\062\102\044\104\070\001\002\000" +
    "\056\006\uff5e\007\uff5e\012\uff5e\015\uff5e\021\uff5e\027\uff5e" +
    "\036\uff5e\037\uff5e\043\uff5e\046\uff5e\047\uff5e\050\uff5e\052" +
    "\173\053\uff5e\056\uff5e\057\uff5e\060\uff5e\063\uff5e\065\uff5e" +
    "\066\uff5e\070\175\071\174\001\002\000\046\006\uff50\020" +
    "\uff50\032\uff50\045\uff50\050\uff50\051\uff50\054\uff50\055\uff50" +
    "\060\uff50\061\uff50\067\uff50\071\uff50\073\uff50\075\uff50\100" +
    "\uff50\101\uff50\102\uff50\104\uff50\001\002\000\046\006\uff52" +
    "\020\uff52\032\uff52\045\uff52\050\uff52\051\uff52\054\uff52\055" +
    "\uff52\060\uff52\061\uff52\067\uff52\071\uff52\073\uff52\075\uff52" +
    "\100\uff52\101\uff52\102\uff52\104\uff52\001\002\000\046\006" +
    "\uff51\020\uff51\032\uff51\045\uff51\050\uff51\051\uff51\054\uff51" +
    "\055\uff51\060\uff51\061\uff51\067\uff51\071\uff51\073\uff51\075" +
    "\uff51\100\uff51\101\uff51\102\uff51\104\uff51\001\002\000\046" +
    "\006\071\020\100\032\065\045\073\050\064\051\074\054" +
    "\061\055\101\060\076\061\063\067\067\071\102\073\060" +
    "\075\052\100\077\101\062\102\044\104\070\001\002\000" +
    "\056\006\uff5c\007\uff5c\012\uff5c\015\uff5c\021\uff5c\027\uff5c" +
    "\036\uff5c\037\uff5c\043\uff5c\046\uff5c\047\uff5c\050\uff5c\052" +
    "\uff5c\053\uff5c\056\uff5c\057\uff5c\060\uff5c\063\uff5c\065\uff5c" +
    "\066\uff5c\070\uff5c\071\uff5c\001\002\000\004\066\201\001" +
    "\002\000\124\002\uffed\004\uffed\005\uffed\006\uffed\013\uffed" +
    "\014\uffed\016\uffed\020\uffed\022\uffed\023\uffed\024\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\040\uffed" +
    "\041\uffed\043\uffed\045\uffed\050\uffed\051\uffed\054\uffed\055" +
    "\uffed\060\uffed\061\uffed\062\uffed\064\uffed\067\uffed\071\uffed" +
    "\072\uffed\073\uffed\075\uffed\076\uffed\100\uffed\101\uffed\102" +
    "\uffed\103\uffed\104\uffed\105\uffed\001\002\000\046\006\071" +
    "\020\100\032\065\045\073\050\064\051\074\054\061\055" +
    "\101\060\076\061\063\067\067\071\102\073\060\075\052" +
    "\100\077\101\062\102\044\104\070\001\002\000\050\006" +
    "\071\020\100\032\065\045\073\050\064\051\074\054\061" +
    "\055\101\060\076\061\063\065\uff73\067\067\071\102\073" +
    "\060\075\052\100\077\101\062\102\044\104\070\001\002" +
    "\000\076\006\uff41\007\uff41\010\uff41\011\uff41\012\uff41\015" +
    "\uff41\017\uff41\021\uff41\025\uff41\027\uff41\036\uff41\037\uff41" +
    "\043\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051" +
    "\uff41\052\uff41\053\uff41\056\uff41\057\uff41\060\uff41\061\uff41" +
    "\063\uff41\065\uff41\066\uff41\070\uff41\071\uff41\001\002\000" +
    "\004\104\210\001\002\000\004\104\207\001\002\000\076" +
    "\006\uff44\007\uff44\010\uff44\011\uff44\012\uff44\015\uff44\017" +
    "\uff44\021\uff44\025\uff44\027\uff44\036\uff44\037\uff44\043\uff44" +
    "\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44\052" +
    "\uff44\053\uff44\056\uff44\057\uff44\060\uff44\061\uff44\063\uff44" +
    "\065\uff44\066\uff44\070\uff44\071\uff44\001\002\000\076\006" +
    "\uff42\007\uff42\010\uff42\011\uff42\012\uff42\015\uff42\017\uff42" +
    "\021\uff42\025\uff42\027\uff42\036\uff42\037\uff42\043\uff42\044" +
    "\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42" +
    "\053\uff42\056\uff42\057\uff42\060\uff42\061\uff42\063\uff42\065" +
    "\uff42\066\uff42\070\uff42\071\uff42\001\002\000\006\021\uff72" +
    "\065\uff72\001\002\000\006\021\215\065\uff74\001\002\000" +
    "\004\065\214\001\002\000\076\006\uff40\007\uff40\010\uff40" +
    "\011\uff40\012\uff40\015\uff40\017\uff40\021\uff40\025\uff40\027" +
    "\uff40\036\uff40\037\uff40\043\uff40\044\uff40\045\uff40\046\uff40" +
    "\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\056\uff40\057" +
    "\uff40\060\uff40\061\uff40\063\uff40\065\uff40\066\uff40\070\uff40" +
    "\071\uff40\001\002\000\046\006\071\020\100\032\065\045" +
    "\073\050\064\051\074\054\061\055\101\060\076\061\063" +
    "\067\067\071\102\073\060\075\052\100\077\101\062\102" +
    "\044\104\070\001\002\000\006\021\uff71\065\uff71\001\002" +
    "\000\004\063\220\001\002\000\076\006\uff43\007\uff43\010" +
    "\uff43\011\uff43\012\uff43\015\uff43\017\uff43\021\uff43\025\uff43" +
    "\027\uff43\036\uff43\037\uff43\043\uff43\044\uff43\045\uff43\046" +
    "\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43\056\uff43" +
    "\057\uff43\060\uff43\061\uff43\063\uff43\065\uff43\066\uff43\070" +
    "\uff43\071\uff43\001\002\000\046\006\071\020\100\032\065" +
    "\045\073\050\064\051\074\054\061\055\101\060\076\061" +
    "\063\067\067\071\102\073\060\075\052\100\077\101\062" +
    "\102\044\104\070\001\002\000\016\021\uff6e\043\uff6e\057" +
    "\uff6e\063\uff6e\065\uff6e\066\uff6e\001\002\000\010\017\uffbb" +
    "\044\131\066\uffbb\001\002\000\006\017\225\066\uff96\001" +
    "\002\000\004\045\232\001\002\000\004\066\uff97\001\002" +
    "\000\004\066\ufff0\001\002\000\004\066\231\001\002\000" +
    "\124\002\uffef\004\uffef\005\uffef\006\uffef\013\uffef\014\uffef" +
    "\016\uffef\020\uffef\022\uffef\023\uffef\024\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040\uffef\041\uffef" +
    "\043\uffef\045\uffef\050\uffef\051\uffef\054\uffef\055\uffef\060" +
    "\uffef\061\uffef\062\uffef\064\uffef\067\uffef\071\uffef\072\uffef" +
    "\073\uffef\075\uffef\076\uffef\100\uffef\101\uffef\102\uffef\103" +
    "\uffef\104\uffef\105\uffef\001\002\000\050\006\071\020\100" +
    "\032\065\045\073\050\064\051\074\054\061\055\101\060" +
    "\076\061\063\065\uff73\067\067\071\102\073\060\075\052" +
    "\100\077\101\062\102\044\104\070\001\002\000\004\065" +
    "\uff95\001\002\000\004\065\235\001\002\000\004\066\uff94" +
    "\001\002\000\012\006\uffc8\044\uffc8\065\uffc8\104\uffc8\001" +
    "\002\000\014\006\uffc1\044\uffc1\065\uffc1\071\114\104\uffc1" +
    "\001\002\000\010\011\uffbb\044\131\066\uffbb\001\002\000" +
    "\006\011\243\066\uff98\001\002\000\004\066\ufff2\001\002" +
    "\000\046\006\071\020\100\032\065\045\073\050\064\051" +
    "\074\054\061\055\101\060\076\061\063\067\067\071\102" +
    "\073\060\075\052\100\077\101\062\102\044\104\070\001" +
    "\002\000\004\066\uff99\001\002\000\004\066\246\001\002" +
    "\000\124\002\ufff1\004\ufff1\005\ufff1\006\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041" +
    "\ufff1\043\ufff1\045\ufff1\050\ufff1\051\ufff1\054\ufff1\055\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\064\ufff1\067\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\075\ufff1\076\ufff1\100\ufff1\101\ufff1\102\ufff1" +
    "\103\ufff1\104\ufff1\105\ufff1\001\002\000\004\043\250\001" +
    "\002\000\012\013\uffea\033\uffea\041\uffea\103\uffea\001\002" +
    "\000\012\013\032\033\034\041\035\103\030\001\002\000" +
    "\020\013\032\033\034\035\uffe2\041\035\062\uffe2\074\261" +
    "\103\263\001\002\000\004\104\255\001\002\000\020\013" +
    "\uffe6\033\uffe6\035\uffe6\041\uffe6\062\uffe6\074\uffe6\103\uffe6" +
    "\001\002\000\006\044\131\066\uffbb\001\002\000\004\066" +
    "\257\001\002\000\020\013\uffe4\033\uffe4\035\uffe4\041\uffe4" +
    "\062\uffe4\074\uffe4\103\uffe4\001\002\000\012\035\uffde\062" +
    "\uffde\074\uffde\103\uffde\001\002\000\004\103\u012b\001\002" +
    "\000\020\013\uffe5\033\uffe5\035\uffe5\041\uffe5\062\uffe5\074" +
    "\uffe5\103\uffe5\001\002\000\006\045\uffdd\071\uffc4\001\002" +
    "\000\012\035\uffe3\062\uffe3\074\261\103\301\001\002\000" +
    "\012\035\uffe1\062\uffe1\074\uffe1\103\uffe1\001\002\000\012" +
    "\035\uffdf\062\uffdf\074\uffdf\103\uffdf\001\002\000\006\035" +
    "\uffe9\062\uffe9\001\002\000\006\035\011\062\uffd7\001\002" +
    "\000\006\035\uffd6\062\uffd6\001\002\000\006\035\011\062" +
    "\uffd8\001\002\000\006\035\uffd4\062\uffd4\001\002\000\004" +
    "\062\uffe8\001\002\000\004\062\276\001\002\000\004\066" +
    "\277\001\002\000\026\002\uffe7\013\uffe7\022\uffe7\031\uffe7" +
    "\033\uffe7\035\uffe7\041\uffe7\072\uffe7\103\uffe7\105\uffe7\001" +
    "\002\000\006\035\uffd5\062\uffd5\001\002\000\004\045\uffdd" +
    "\001\002\000\012\035\uffe0\062\uffe0\074\uffe0\103\uffe0\001" +
    "\002\000\004\045\304\001\002\000\014\013\032\033\034" +
    "\041\035\065\uff9f\103\030\001\002\000\006\006\363\104" +
    "\uff9a\001\002\000\006\021\u0126\065\uffa0\001\002\000\006" +
    "\021\uff9e\065\uff9e\001\002\000\004\065\311\001\002\000" +
    "\004\043\uffdc\001\002\000\004\043\313\001\002\000\114" +
    "\004\327\005\321\006\071\013\uffeb\014\343\016\333\020" +
    "\100\022\uffeb\023\317\024\320\030\337\032\065\033\uffeb" +
    "\034\345\040\347\041\uffeb\043\326\045\073\050\064\051" +
    "\074\054\061\055\101\060\076\061\063\062\uffb2\064\323" +
    "\067\067\071\102\073\060\075\052\076\316\100\077\101" +
    "\062\102\044\103\uffeb\104\070\105\015\001\002\000\114" +
    "\004\uffa3\005\uffa3\006\uffa3\013\uffa3\014\uffa3\016\uffa3\020" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\030\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\040\uffa3\041\uffa3\043\uffa3\045\uffa3\050\uffa3\051" +
    "\uffa3\054\uffa3\055\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3" +
    "\067\uffa3\071\uffa3\073\uffa3\075\uffa3\076\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\001\002\000\114" +
    "\004\uffa4\005\uffa4\006\uffa4\013\uffa4\014\uffa4\016\uffa4\020" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\030\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\040\uffa4\041\uffa4\043\uffa4\045\uffa4\050\uffa4\051" +
    "\uffa4\054\uffa4\055\uffa4\060\uffa4\061\uffa4\062\uffa4\064\uffa4" +
    "\067\uffa4\071\uffa4\073\uffa4\075\uffa4\076\uffa4\100\uffa4\101" +
    "\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\001\002\000\046" +
    "\006\uff8a\020\uff8a\032\uff8a\045\uff8a\050\uff8a\051\uff8a\054" +
    "\uff8a\055\uff8a\060\uff8a\061\uff8a\067\uff8a\071\uff8a\073\uff8a" +
    "\075\uff8a\100\uff8a\101\uff8a\102\uff8a\104\uff8a\001\002\000" +
    "\004\066\uff83\001\002\000\004\057\u0118\001\002\000\046" +
    "\006\071\020\100\032\065\045\073\050\064\051\074\054" +
    "\061\055\101\060\076\061\063\067\067\071\102\073\060" +
    "\075\052\100\077\101\062\102\044\104\070\001\002\000" +
    "\114\004\uffa2\005\uffa2\006\uffa2\013\uffa2\014\uffa2\016\uffa2" +
    "\020\uffa2\022\uffa2\023\uffa2\024\uffa2\030\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\040\uffa2\041\uffa2\043\uffa2\045\uffa2\050\uffa2" +
    "\051\uffa2\054\uffa2\055\uffa2\060\uffa2\061\uffa2\062\uffa2\064" +
    "\uffa2\067\uffa2\071\uffa2\073\uffa2\075\uffa2\076\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002\000" +
    "\050\006\071\020\100\032\065\045\073\050\064\051\074" +
    "\054\061\055\101\060\076\061\063\066\uff7f\067\067\071" +
    "\102\073\060\075\052\100\077\101\062\102\044\104\070" +
    "\001\002\000\114\004\uffa1\005\uffa1\006\uffa1\013\uffa1\014" +
    "\uffa1\016\uffa1\020\uffa1\022\uffa1\023\uffa1\024\uffa1\030\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\040\uffa1\041\uffa1\043\uffa1\045" +
    "\uffa1\050\uffa1\051\uffa1\054\uffa1\055\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\064\uffa1\067\uffa1\071\uffa1\073\uffa1\075\uffa1\076" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1" +
    "\001\002\000\114\004\uffa8\005\uffa8\006\uffa8\013\uffa8\014" +
    "\uffa8\016\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8\030\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\040\uffa8\041\uffa8\043\uffa8\045" +
    "\uffa8\050\uffa8\051\uffa8\054\uffa8\055\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\064\uffa8\067\uffa8\071\uffa8\073\uffa8\075\uffa8\076" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8" +
    "\001\002\000\114\004\uffb6\005\uffb6\006\uffb6\013\uffb6\014" +
    "\uffb6\016\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\030\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\040\uffb6\041\uffb6\043\uffb6\045" +
    "\uffb6\050\uffb6\051\uffb6\054\uffb6\055\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\064\uffb6\067\uffb6\071\uffb6\073\uffb6\075\uffb6\076" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\001\002\000\046\006\071\020\100\032\065\045\073\050" +
    "\064\051\074\054\061\055\101\060\076\061\063\067\067" +
    "\071\102\073\060\075\052\100\077\101\062\102\044\104" +
    "\070\001\002\000\114\004\327\005\321\006\071\013\uffeb" +
    "\014\343\016\333\020\100\022\uffeb\023\317\024\320\030" +
    "\337\032\065\033\uffeb\034\345\040\347\041\uffeb\043\326" +
    "\045\073\050\064\051\074\054\061\055\101\060\076\061" +
    "\063\062\uffb3\064\323\067\067\071\102\073\060\075\052" +
    "\076\316\100\077\101\062\102\044\103\uffeb\104\070\105" +
    "\015\001\002\000\114\004\uffab\005\uffab\006\uffab\013\uffab" +
    "\014\uffab\016\uffab\020\uffab\022\uffab\023\uffab\024\uffab\030" +
    "\uffab\032\uffab\033\uffab\034\uffab\040\uffab\041\uffab\043\uffab" +
    "\045\uffab\050\uffab\051\uffab\054\uffab\055\uffab\060\uffab\061" +
    "\uffab\062\uffab\064\uffab\067\uffab\071\uffab\073\uffab\075\uffab" +
    "\076\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105" +
    "\uffab\001\002\000\114\004\uffad\005\uffad\006\uffad\013\uffad" +
    "\014\uffad\016\uffad\020\uffad\022\uffad\023\uffad\024\uffad\030" +
    "\uffad\032\uffad\033\uffad\034\uffad\040\uffad\041\uffad\043\uffad" +
    "\045\uffad\050\uffad\051\uffad\054\uffad\055\uffad\060\uffad\061" +
    "\uffad\062\uffad\064\uffad\067\uffad\071\uffad\073\uffad\075\uffad" +
    "\076\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105" +
    "\uffad\001\002\000\004\042\u0104\001\002\000\114\004\uffa9" +
    "\005\uffa9\006\uffa9\013\uffa9\014\uffa9\016\uffa9\020\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\040\uffa9\041\uffa9\043\uffa9\045\uffa9\050\uffa9\051\uffa9\054" +
    "\uffa9\055\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9\067\uffa9" +
    "\071\uffa9\073\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102" +
    "\uffa9\103\uffa9\104\uffa9\105\uffa9\001\002\000\004\066\u0103" +
    "\001\002\000\004\062\u0102\001\002\000\004\045\375\001" +
    "\002\000\114\004\uffa7\005\uffa7\006\uffa7\013\uffa7\014\uffa7" +
    "\016\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\030\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\040\uffa7\041\uffa7\043\uffa7\045\uffa7" +
    "\050\uffa7\051\uffa7\054\uffa7\055\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\064\uffa7\067\uffa7\071\uffa7\073\uffa7\075\uffa7\076\uffa7" +
    "\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\001" +
    "\002\000\114\004\uffaf\005\uffaf\006\uffaf\013\uffaf\014\uffaf" +
    "\016\uffaf\020\uffaf\022\uffaf\023\uffaf\024\uffaf\030\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\040\uffaf\041\uffaf\043\uffaf\045\uffaf" +
    "\050\uffaf\051\uffaf\054\uffaf\055\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\064\uffaf\067\uffaf\071\uffaf\073\uffaf\075\uffaf\076\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\001" +
    "\002\000\114\004\uffb1\005\uffb1\006\uffb1\013\uffb1\014\uffb1" +
    "\016\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1\030\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1" +
    "\050\uffb1\051\uffb1\054\uffb1\055\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\064\uffb1\067\uffb1\071\uffb1\073\uffb1\075\uffb1\076\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\001" +
    "\002\000\004\066\uff85\001\002\000\114\004\uffae\005\uffae" +
    "\006\uffae\013\uffae\014\uffae\016\uffae\020\uffae\022\uffae\023" +
    "\uffae\024\uffae\030\uffae\032\uffae\033\uffae\034\uffae\040\uffae" +
    "\041\uffae\043\uffae\045\uffae\050\uffae\051\uffae\054\uffae\055" +
    "\uffae\060\uffae\061\uffae\062\uffae\064\uffae\067\uffae\071\uffae" +
    "\073\uffae\075\uffae\076\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\001\002\000\004\045\361\001\002" +
    "\000\114\004\uffa5\005\uffa5\006\uffa5\013\uffa5\014\uffa5\016" +
    "\uffa5\020\uffa5\022\uffa5\023\uffa5\024\uffa5\030\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5\050" +
    "\uffa5\051\uffa5\054\uffa5\055\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\064\uffa5\067\uffa5\071\uffa5\073\uffa5\075\uffa5\076\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\001\002" +
    "\000\046\006\071\020\100\032\065\045\073\050\064\051" +
    "\074\054\061\055\101\060\076\061\063\067\067\071\102" +
    "\073\060\075\052\100\077\101\062\102\044\104\070\001" +
    "\002\000\114\004\uffaa\005\uffaa\006\uffaa\013\uffaa\014\uffaa" +
    "\016\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\030\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\040\uffaa\041\uffaa\043\uffaa\045\uffaa" +
    "\050\uffaa\051\uffaa\054\uffaa\055\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\064\uffaa\067\uffaa\071\uffaa\073\uffaa\075\uffaa\076\uffaa" +
    "\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\001" +
    "\002\000\114\004\uffa6\005\uffa6\006\uffa6\013\uffa6\014\uffa6" +
    "\016\uffa6\020\uffa6\022\uffa6\023\uffa6\024\uffa6\030\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\040\uffa6\041\uffa6\043\uffa6\045\uffa6" +
    "\050\uffa6\051\uffa6\054\uffa6\055\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\064\uffa6\067\uffa6\071\uffa6\073\uffa6\075\uffa6\076\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\001" +
    "\002\000\004\043\uff8f\001\002\000\004\043\326\001\002" +
    "\000\116\004\uff8e\005\uff8e\006\uff8e\013\uff8e\014\uff8e\016" +
    "\uff8e\020\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\030\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\040\uff8e\041\uff8e\043\uff8e\045" +
    "\uff8e\050\uff8e\051\uff8e\054\uff8e\055\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\064\uff8e\067\uff8e\071\uff8e\073\uff8e\075\uff8e\076" +
    "\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e" +
    "\001\002\000\116\004\uff8b\005\uff8b\006\uff8b\013\uff8b\014" +
    "\uff8b\016\uff8b\020\uff8b\022\uff8b\023\uff8b\024\uff8b\026\357" +
    "\030\uff8b\032\uff8b\033\uff8b\034\uff8b\040\uff8b\041\uff8b\043" +
    "\uff8b\045\uff8b\050\uff8b\051\uff8b\054\uff8b\055\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\064\uff8b\067\uff8b\071\uff8b\073\uff8b\075" +
    "\uff8b\076\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b" +
    "\105\uff8b\001\002\000\114\004\uff8d\005\uff8d\006\uff8d\013" +
    "\uff8d\014\uff8d\016\uff8d\020\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\030\uff8d\032\uff8d\033\uff8d\034\uff8d\040\uff8d\041\uff8d\043" +
    "\uff8d\045\uff8d\050\uff8d\051\uff8d\054\uff8d\055\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\064\uff8d\067\uff8d\071\uff8d\073\uff8d\075" +
    "\uff8d\076\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\001\002\000\004\043\326\001\002\000\114\004" +
    "\uff8c\005\uff8c\006\uff8c\013\uff8c\014\uff8c\016\uff8c\020\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\030\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\040\uff8c\041\uff8c\043\uff8c\045\uff8c\050\uff8c\051\uff8c" +
    "\054\uff8c\055\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c\067" +
    "\uff8c\071\uff8c\073\uff8c\075\uff8c\076\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\104\uff8c\105\uff8c\001\002\000\012\013" +
    "\032\033\034\041\035\103\030\001\002\000\006\006\363" +
    "\104\uff9a\001\002\000\004\104\uff9b\001\002\000\004\104" +
    "\365\001\002\000\004\017\366\001\002\000\046\006\071" +
    "\020\100\032\065\045\073\050\064\051\074\054\061\055" +
    "\101\060\076\061\063\067\067\071\102\073\060\075\052" +
    "\100\077\101\062\102\044\104\070\001\002\000\004\065" +
    "\370\001\002\000\004\043\uff87\001\002\000\004\043\326" +
    "\001\002\000\114\004\uff86\005\uff86\006\uff86\013\uff86\014" +
    "\uff86\016\uff86\020\uff86\022\uff86\023\uff86\024\uff86\030\uff86" +
    "\032\uff86\033\uff86\034\uff86\040\uff86\041\uff86\043\uff86\045" +
    "\uff86\050\uff86\051\uff86\054\uff86\055\uff86\060\uff86\061\uff86" +
    "\062\uff86\064\uff86\067\uff86\071\uff86\073\uff86\075\uff86\076" +
    "\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86" +
    "\001\002\000\004\066\374\001\002\000\114\004\uff84\005" +
    "\uff84\006\uff84\013\uff84\014\uff84\016\uff84\020\uff84\022\uff84" +
    "\023\uff84\024\uff84\030\uff84\032\uff84\033\uff84\034\uff84\040" +
    "\uff84\041\uff84\043\uff84\045\uff84\050\uff84\051\uff84\054\uff84" +
    "\055\uff84\060\uff84\061\uff84\062\uff84\064\uff84\067\uff84\071" +
    "\uff84\073\uff84\075\uff84\076\uff84\100\uff84\101\uff84\102\uff84" +
    "\103\uff84\104\uff84\105\uff84\001\002\000\046\006\071\020" +
    "\100\032\065\045\073\050\064\051\074\054\061\055\101" +
    "\060\076\061\063\067\067\071\102\073\060\075\052\100" +
    "\077\101\062\102\044\104\070\001\002\000\004\065\uff81" +
    "\001\002\000\004\065\u0100\001\002\000\004\066\u0101\001" +
    "\002\000\114\004\uff80\005\uff80\006\uff80\013\uff80\014\uff80" +
    "\016\uff80\020\uff80\022\uff80\023\uff80\024\uff80\030\uff80\032" +
    "\uff80\033\uff80\034\uff80\040\uff80\041\uff80\043\uff80\045\uff80" +
    "\050\uff80\051\uff80\054\uff80\055\uff80\060\uff80\061\uff80\062" +
    "\uff80\064\uff80\067\uff80\071\uff80\073\uff80\075\uff80\076\uff80" +
    "\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\001" +
    "\002\000\012\035\uffdb\062\uffdb\074\uffdb\103\uffdb\001\002" +
    "\000\114\004\uffac\005\uffac\006\uffac\013\uffac\014\uffac\016" +
    "\uffac\020\uffac\022\uffac\023\uffac\024\uffac\030\uffac\032\uffac" +
    "\033\uffac\034\uffac\040\uffac\041\uffac\043\uffac\045\uffac\050" +
    "\uffac\051\uffac\054\uffac\055\uffac\060\uffac\061\uffac\062\uffac" +
    "\064\uffac\067\uffac\071\uffac\073\uffac\075\uffac\076\uffac\100" +
    "\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\001\002" +
    "\000\046\006\071\020\100\032\065\045\073\050\064\051" +
    "\074\054\061\055\101\060\076\061\063\067\067\071\102" +
    "\073\060\075\052\100\077\101\062\102\044\104\070\001" +
    "\002\000\004\066\u0106\001\002\000\114\004\uff7b\005\uff7b" +
    "\006\uff7b\013\uff7b\014\uff7b\016\uff7b\020\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\030\uff7b\032\uff7b\033\uff7b\034\uff7b\040\uff7b" +
    "\041\uff7b\043\uff7b\045\uff7b\050\uff7b\051\uff7b\054\uff7b\055" +
    "\uff7b\060\uff7b\061\uff7b\062\uff7b\064\uff7b\067\uff7b\071\uff7b" +
    "\073\uff7b\075\uff7b\076\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\001\002\000\114\004\uffb0\005\uffb0" +
    "\006\uffb0\013\uffb0\014\uffb0\016\uffb0\020\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\045\uffb0\050\uffb0\051\uffb0\054\uffb0\055" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\067\uffb0\071\uffb0" +
    "\073\uffb0\075\uffb0\076\uffb0\100\uffb0\101\uffb0\102\uffb0\103" +
    "\uffb0\104\uffb0\105\uffb0\001\002\000\006\017\225\066\uff96" +
    "\001\002\000\004\066\uff93\001\002\000\004\066\u010b\001" +
    "\002\000\114\004\uff92\005\uff92\006\uff92\013\uff92\014\uff92" +
    "\016\uff92\020\uff92\022\uff92\023\uff92\024\uff92\030\uff92\032" +
    "\uff92\033\uff92\034\uff92\040\uff92\041\uff92\043\uff92\045\uff92" +
    "\050\uff92\051\uff92\054\uff92\055\uff92\060\uff92\061\uff92\062" +
    "\uff92\064\uff92\067\uff92\071\uff92\073\uff92\075\uff92\076\uff92" +
    "\100\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\001" +
    "\002\000\114\004\327\005\321\006\071\013\uffeb\014\343" +
    "\016\333\020\100\022\uffeb\023\317\024\320\030\337\032" +
    "\065\033\uffeb\034\345\040\347\041\uffeb\043\326\045\073" +
    "\050\064\051\074\054\061\055\101\060\076\061\063\062" +
    "\uffb2\064\323\067\067\071\102\073\060\075\052\076\316" +
    "\100\077\101\062\102\044\103\uffeb\104\070\105\015\001" +
    "\002\000\004\062\uffb5\001\002\000\004\062\u010f\001\002" +
    "\000\116\004\uffb4\005\uffb4\006\uffb4\013\uffb4\014\uffb4\016" +
    "\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\030\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\040\uffb4\041\uffb4\043\uffb4\045" +
    "\uffb4\050\uffb4\051\uffb4\054\uffb4\055\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\064\uffb4\067\uffb4\071\uffb4\073\uffb4\075\uffb4\076" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\001\002\000\004\066\uff7d\001\002\000\004\066\u0112\001" +
    "\002\000\114\004\uff7e\005\uff7e\006\uff7e\013\uff7e\014\uff7e" +
    "\016\uff7e\020\uff7e\022\uff7e\023\uff7e\024\uff7e\030\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\040\uff7e\041\uff7e\043\uff7e\045\uff7e" +
    "\050\uff7e\051\uff7e\054\uff7e\055\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\064\uff7e\067\uff7e\071\uff7e\073\uff7e\075\uff7e\076\uff7e" +
    "\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\001" +
    "\002\000\004\066\u0114\001\002\000\114\004\uff7c\005\uff7c" +
    "\006\uff7c\013\uff7c\014\uff7c\016\uff7c\020\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\030\uff7c\032\uff7c\033\uff7c\034\uff7c\040\uff7c" +
    "\041\uff7c\043\uff7c\045\uff7c\050\uff7c\051\uff7c\054\uff7c\055" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\064\uff7c\067\uff7c\071\uff7c" +
    "\073\uff7c\075\uff7c\076\uff7c\100\uff7c\101\uff7c\102\uff7c\103" +
    "\uff7c\104\uff7c\105\uff7c\001\002\000\004\066\uff91\001\002" +
    "\000\004\066\u0117\001\002\000\114\004\uff90\005\uff90\006" +
    "\uff90\013\uff90\014\uff90\016\uff90\020\uff90\022\uff90\023\uff90" +
    "\024\uff90\030\uff90\032\uff90\033\uff90\034\uff90\040\uff90\041" +
    "\uff90\043\uff90\045\uff90\050\uff90\051\uff90\054\uff90\055\uff90" +
    "\060\uff90\061\uff90\062\uff90\064\uff90\067\uff90\071\uff90\073" +
    "\uff90\075\uff90\076\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\104\uff90\105\uff90\001\002\000\050\006\071\020\100\032" +
    "\065\045\073\050\064\051\074\054\061\055\101\060\076" +
    "\061\063\067\067\071\102\073\060\075\052\100\077\101" +
    "\062\102\044\104\070\106\u011b\001\002\000\006\057\u011d" +
    "\066\u011e\001\002\000\006\057\uff79\066\uff79\001\002\000" +
    "\006\057\uff76\066\uff76\001\002\000\006\057\uff77\066\uff77" +
    "\001\002\000\050\006\071\020\100\032\065\045\073\050" +
    "\064\051\074\054\061\055\101\060\076\061\063\067\067" +
    "\071\102\073\060\075\052\100\077\101\062\102\044\104" +
    "\070\106\u011b\001\002\000\114\004\uff7a\005\uff7a\006\uff7a" +
    "\013\uff7a\014\uff7a\016\uff7a\020\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\030\uff7a\032\uff7a\033\uff7a\034\uff7a\040\uff7a\041\uff7a" +
    "\043\uff7a\045\uff7a\050\uff7a\051\uff7a\054\uff7a\055\uff7a\060" +
    "\uff7a\061\uff7a\062\uff7a\064\uff7a\067\uff7a\071\uff7a\073\uff7a" +
    "\075\uff7a\076\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104" +
    "\uff7a\105\uff7a\001\002\000\006\057\uff78\066\uff78\001\002" +
    "\000\004\066\u0121\001\002\000\114\004\uff82\005\uff82\006" +
    "\uff82\013\uff82\014\uff82\016\uff82\020\uff82\022\uff82\023\uff82" +
    "\024\uff82\030\uff82\032\uff82\033\uff82\034\uff82\040\uff82\041" +
    "\uff82\043\uff82\045\uff82\050\uff82\051\uff82\054\uff82\055\uff82" +
    "\060\uff82\061\uff82\062\uff82\064\uff82\067\uff82\071\uff82\073" +
    "\uff82\075\uff82\076\uff82\100\uff82\101\uff82\102\uff82\103\uff82" +
    "\104\uff82\105\uff82\001\002\000\046\006\071\020\100\032" +
    "\065\045\073\050\064\051\074\054\061\055\101\060\076" +
    "\061\063\067\067\071\102\073\060\075\052\100\077\101" +
    "\062\102\044\104\070\001\002\000\004\043\uff89\001\002" +
    "\000\004\043\326\001\002\000\114\004\uff88\005\uff88\006" +
    "\uff88\013\uff88\014\uff88\016\uff88\020\uff88\022\uff88\023\uff88" +
    "\024\uff88\030\uff88\032\uff88\033\uff88\034\uff88\040\uff88\041" +
    "\uff88\043\uff88\045\uff88\050\uff88\051\uff88\054\uff88\055\uff88" +
    "\060\uff88\061\uff88\062\uff88\064\uff88\067\uff88\071\uff88\073" +
    "\uff88\075\uff88\076\uff88\100\uff88\101\uff88\102\uff88\103\uff88" +
    "\104\uff88\105\uff88\001\002\000\012\013\032\033\034\041" +
    "\035\103\030\001\002\000\006\021\uff9d\065\uff9d\001\002" +
    "\000\004\104\u0129\001\002\000\010\021\uffbb\044\131\065" +
    "\uffbb\001\002\000\006\021\uff9c\065\uff9c\001\002\000\004" +
    "\045\uffda\001\002\000\004\045\u012d\001\002\000\004\065" +
    "\u012e\001\002\000\004\043\u012f\001\002\000\114\004\327" +
    "\005\321\006\071\013\uffeb\014\343\016\333\020\100\022" +
    "\uffeb\023\317\024\320\030\337\032\065\033\uffeb\034\345" +
    "\040\347\041\uffeb\043\326\045\073\050\064\051\074\054" +
    "\061\055\101\060\076\061\063\062\uffb2\064\323\067\067" +
    "\071\102\073\060\075\052\076\316\100\077\101\062\102" +
    "\044\103\uffeb\104\070\105\015\001\002\000\004\062\u0131" +
    "\001\002\000\012\035\uffd9\062\uffd9\074\uffd9\103\uffd9\001" +
    "\002\000\014\013\032\033\034\041\035\077\u0135\103\030" +
    "\001\002\000\006\006\uffc3\104\uffc3\001\002\000\006\006" +
    "\363\104\uff9a\001\002\000\006\006\uffc2\104\uffc2\001\002" +
    "\000\004\104\u0137\001\002\000\004\045\uffd3\001\002\000" +
    "\004\045\u0139\001\002\000\014\013\032\033\034\041\035" +
    "\065\uff9f\103\030\001\002\000\004\065\u013b\001\002\000" +
    "\004\043\uffd2\001\002\000\004\043\u013d\001\002\000\114" +
    "\004\327\005\321\006\071\013\uffeb\014\343\016\333\020" +
    "\100\022\uffeb\023\317\024\320\030\337\032\065\033\uffeb" +
    "\034\345\040\347\041\uffeb\043\326\045\073\050\064\051" +
    "\074\054\061\055\101\060\076\061\063\062\uffb2\064\323" +
    "\067\067\071\102\073\060\075\052\076\316\100\077\101" +
    "\062\102\044\103\uffeb\104\070\105\015\001\002\000\004" +
    "\062\uffd1\001\002\000\004\062\u0140\001\002\000\030\002" +
    "\uffd0\013\uffd0\022\uffd0\031\uffd0\033\uffd0\035\uffd0\041\uffd0" +
    "\062\uffd0\072\uffd0\103\uffd0\105\uffd0\001\002\000\004\017" +
    "\u0147\001\002\000\004\104\u0143\001\002\000\006\044\131" +
    "\066\uffbb\001\002\000\004\066\ufff4\001\002\000\004\066" +
    "\u0146\001\002\000\026\002\ufff3\013\ufff3\022\ufff3\031\ufff3" +
    "\033\ufff3\035\ufff3\041\ufff3\072\ufff3\103\ufff3\105\ufff3\001" +
    "\002\000\014\013\032\033\034\041\035\077\u0135\103\030" +
    "\001\002\000\004\104\u0149\001\002\000\004\045\uffcf\001" +
    "\002\000\004\045\u014b\001\002\000\014\013\032\033\034" +
    "\041\035\065\uff9f\103\030\001\002\000\004\065\u014d\001" +
    "\002\000\004\066\uffce\001\002\000\004\066\u014f\001\002" +
    "\000\026\002\uffcd\013\uffcd\022\uffcd\031\uffcd\033\uffcd\035" +
    "\uffcd\041\uffcd\072\uffcd\103\uffcd\105\uffcd\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014e\000\006\005\003\123\004\001\001\000\002\001" +
    "\001\000\026\006\021\007\017\010\015\011\005\012\020" +
    "\013\013\014\022\015\007\037\012\063\016\001\001\000" +
    "\002\001\001\000\006\072\026\073\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\072" +
    "\026\073\024\074\030\076\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\023\011\005\012\020\013\013\014\022\015\007" +
    "\037\012\063\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\100\115\120\235\121\236\001" +
    "\001\000\002\001\001\000\006\100\115\121\114\001\001" +
    "\000\002\001\001\000\004\072\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\035\071\036\074\041\065\042\056\043\055\044" +
    "\054\045\053\046\047\047\046\050\044\051\042\052\041" +
    "\057\052\060\040\061\050\062\045\001\001\000\002\001" +
    "\001\000\004\032\175\001\001\000\004\031\170\001\001" +
    "\000\002\001\001\000\004\033\163\001\001\000\002\001" +
    "\001\000\004\034\154\001\001\000\002\001\001\000\004" +
    "\035\203\001\001\000\002\001\001\000\004\127\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\035\071\036" +
    "\074\060\140\061\050\062\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\071\036\074\060\120\061\050\062\045\001\001\000" +
    "\014\035\071\036\074\060\117\061\050\062\045\001\001" +
    "\000\050\035\071\036\074\041\107\042\056\043\055\044" +
    "\054\045\053\046\047\047\046\050\044\051\042\052\041" +
    "\060\040\061\050\062\045\072\026\073\024\074\105\076" +
    "\106\001\001\000\002\001\001\000\014\035\071\036\074" +
    "\060\104\061\050\062\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\071\036\074\060\102\061\050\062\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\100\115\121\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\035\071\036\074\060\112" +
    "\061\050\062\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\071\036\074\060\122\061\050\062\045\072\026\073\024" +
    "\074\123\075\124\076\125\001\001\000\002\001\001\000" +
    "\006\100\115\121\114\001\001\000\010\053\131\107\127" +
    "\110\126\001\001\000\002\001\001\000\004\053\136\001" +
    "\001\000\002\001\001\000\042\035\071\036\074\041\065" +
    "\042\056\043\055\044\054\045\053\046\047\047\046\050" +
    "\044\051\042\052\041\057\132\060\040\061\050\062\045" +
    "\001\001\000\002\001\001\000\004\143\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\035" +
    "\071\036\074\043\143\044\054\045\053\046\047\047\046" +
    "\050\044\051\042\052\041\060\142\061\050\062\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\035\071" +
    "\036\074\044\145\045\053\046\047\047\046\050\044\051" +
    "\042\052\041\060\142\061\050\062\045\001\001\000\002" +
    "\001\001\000\030\035\071\036\074\045\147\046\047\047" +
    "\046\050\044\051\042\052\041\060\142\061\050\062\045" +
    "\001\001\000\002\001\001\000\026\035\071\036\074\046" +
    "\151\047\046\050\044\051\042\052\041\060\142\061\050" +
    "\062\045\001\001\000\002\001\001\000\024\035\071\036" +
    "\074\047\153\050\044\051\042\052\041\060\142\061\050" +
    "\062\045\001\001\000\004\034\154\001\001\000\022\035" +
    "\071\036\074\050\157\051\042\052\041\060\142\061\050" +
    "\062\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\035\071\036\074\051\165\052" +
    "\041\060\142\061\050\062\045\001\001\000\002\001\001" +
    "\000\004\031\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\035\071\036\074\052\171\060\142\061\050" +
    "\062\045\001\001\000\004\032\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\035\071" +
    "\036\074\060\176\061\050\062\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\035\071" +
    "\036\074\041\216\042\056\043\055\044\054\045\053\046" +
    "\047\047\046\050\044\051\042\052\041\060\040\061\050" +
    "\062\045\001\001\000\044\035\071\036\074\041\210\042" +
    "\056\043\055\044\054\045\053\046\047\047\046\050\044" +
    "\051\042\052\041\060\040\061\050\062\045\103\212\104" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\035\071\036\074\041\215\042\056\043\055\044" +
    "\054\045\053\046\047\047\046\050\044\051\042\052\041" +
    "\060\040\061\050\062\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\035\071\036\074" +
    "\041\221\042\056\043\055\044\054\045\053\046\047\047" +
    "\046\050\044\051\042\052\041\060\040\061\050\062\045" +
    "\001\001\000\002\001\001\000\010\053\131\107\223\110" +
    "\126\001\001\000\006\116\226\117\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\035\071\036\074" +
    "\041\210\042\056\043\055\044\054\045\053\046\047\047" +
    "\046\050\044\051\042\052\041\060\040\061\050\062\045" +
    "\103\232\104\211\001\001\000\004\146\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\116\001\001\000\010\053\131\107\240\110\126\001" +
    "\001\000\004\054\241\001\001\000\004\125\244\001\001" +
    "\000\040\035\071\036\074\041\243\042\056\043\055\044" +
    "\054\045\053\046\047\047\046\050\044\051\042\052\041" +
    "\060\040\061\050\062\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\130\250\001\001\000\016\056\253\072\026\073\024\074" +
    "\105\076\252\111\251\001\001\000\026\056\261\065\265" +
    "\066\257\067\264\072\026\073\024\074\105\076\252\114" +
    "\266\115\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\131\107\255\110\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\302\001\001\000\010\065" +
    "\265\066\257\067\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\267\001\001\000\012\063\272\064" +
    "\270\112\271\113\273\001\001\000\002\001\001\000\006" +
    "\063\272\064\277\001\001\000\002\001\001\000\004\132" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\055\306\072\026" +
    "\073\024\074\123\075\304\076\125\101\307\102\305\001" +
    "\001\000\004\040\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\134\311\001\001\000" +
    "\002\001\001\000\104\003\330\004\347\013\340\014\343" +
    "\016\341\017\331\020\333\022\337\023\324\024\350\025" +
    "\345\026\313\027\321\030\323\035\071\036\074\037\012" +
    "\041\334\042\056\043\055\044\054\045\053\046\047\047" +
    "\046\050\044\051\042\052\041\060\040\061\050\062\045" +
    "\071\314\105\335\106\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\u0121\001\001\000\004\157\u011f" +
    "\001\001\000\002\001\001\000\014\035\071\036\074\060" +
    "\u0114\061\050\062\045\001\001\000\002\001\001\000\042" +
    "\035\071\036\074\041\u010f\042\056\043\055\044\054\045" +
    "\053\046\047\047\046\050\044\051\042\052\041\060\040" +
    "\061\050\062\045\161\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\144\u010b\001\001\000\014\035\071" +
    "\036\074\060\u0107\061\050\062\045\001\001\000\100\003" +
    "\330\004\347\013\340\014\343\016\u0106\017\331\020\333" +
    "\022\337\023\324\024\350\025\345\026\313\027\321\030" +
    "\323\035\071\036\074\037\012\041\334\042\056\043\055" +
    "\044\054\045\053\046\047\047\046\050\044\051\042\052" +
    "\041\060\040\061\050\062\045\071\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\156\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\035\071\036\074\041\351\042" +
    "\056\043\055\044\054\045\053\046\047\047\046\050\044" +
    "\051\042\052\041\060\040\061\050\062\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\352\001\001" +
    "\000\004\017\353\001\001\000\004\152\354\001\001\000" +
    "\004\021\355\001\001\000\002\001\001\000\004\017\357" +
    "\001\001\000\002\001\001\000\014\072\026\073\024\074" +
    "\123\075\361\076\125\001\001\000\004\040\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\035\071\036\074\041\366\042\056\043\055\044\054" +
    "\045\053\046\047\047\046\050\044\051\042\052\041\060" +
    "\040\061\050\062\045\001\001\000\002\001\001\000\004" +
    "\155\370\001\001\000\004\017\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\035\071" +
    "\036\074\041\375\042\056\043\055\044\054\045\053\046" +
    "\047\047\046\050\044\051\042\052\041\060\040\061\050" +
    "\062\045\001\001\000\004\160\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\035\071\036\074\060\u0104\061" +
    "\050\062\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\116\u0108\117\225\001\001\000" +
    "\004\147\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\003\330\004\347\013\340\014\343\016\341\017" +
    "\331\020\333\022\337\023\324\024\350\025\345\026\313" +
    "\027\321\030\323\035\071\036\074\037\012\041\334\042" +
    "\056\043\055\044\054\045\053\046\047\047\046\050\044" +
    "\051\042\052\041\060\040\061\050\062\045\071\314\105" +
    "\u010c\106\327\001\001\000\004\145\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\162\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\150\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\035\071\036\074\041\u011b\042\056" +
    "\043\055\044\054\045\053\046\047\047\046\050\044\051" +
    "\042\052\041\060\040\061\050\062\045\070\u0119\122\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\035\071\036\074\041\u011b" +
    "\042\056\043\055\044\054\045\053\046\047\047\046\050" +
    "\044\051\042\052\041\060\040\061\050\062\045\070\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\035\071\036\074\041\u0122" +
    "\042\056\043\055\044\054\045\053\046\047\047\046\050" +
    "\044\051\042\052\041\060\040\061\050\062\045\001\001" +
    "\000\004\154\u0123\001\001\000\004\017\u0124\001\001\000" +
    "\002\001\001\000\016\055\u0126\072\026\073\024\074\123" +
    "\075\304\076\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\131\107\u0129\110\126\001\001\000\002" +
    "\001\001\000\004\135\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\003\330\004\347" +
    "\013\340\014\343\016\341\017\331\020\333\022\337\023" +
    "\324\024\350\025\345\026\313\027\321\030\323\035\071" +
    "\036\074\037\012\041\334\042\056\043\055\044\054\045" +
    "\053\046\047\047\046\050\044\051\042\052\041\060\040" +
    "\061\050\062\045\071\314\105\u012f\106\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\072\026\073\024" +
    "\074\123\075\u0132\076\125\077\u0133\001\001\000\002\001" +
    "\001\000\004\040\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\u0137\001\001\000\002\001\001\000" +
    "\022\055\306\072\026\073\024\074\123\075\304\076\125" +
    "\101\u0139\102\305\001\001\000\002\001\001\000\004\137" +
    "\u013b\001\001\000\002\001\001\000\104\003\330\004\347" +
    "\013\340\014\343\016\341\017\331\020\333\022\337\023" +
    "\324\024\350\025\345\026\313\027\321\030\323\035\071" +
    "\036\074\037\012\041\334\042\056\043\055\044\054\045" +
    "\053\046\047\047\046\050\044\051\042\052\041\060\040" +
    "\061\050\062\045\071\314\105\u013d\106\327\001\001\000" +
    "\004\140\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\131\107" +
    "\u0143\110\126\001\001\000\004\124\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\072\026\073\024\074" +
    "\123\075\u0132\076\125\077\u0147\001\001\000\002\001\001" +
    "\000\004\141\u0149\001\001\000\002\001\001\000\022\055" +
    "\306\072\026\073\024\074\123\075\304\076\125\101\u014b" +
    "\102\305\001\001\000\002\001\001\000\004\142\u014d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        if(((MyParser) parser).m_symtab.getStruct() != null) {
                            RESULT = ((MyParser) parser).m_symtab.getStruct();
                        } else {
                            RESULT = new ErrorSTO("STRUCT_NOT_DECLARED");
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new NullPointerType());   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        STO sto = new ConstSTO ("BF", new BoolType(), "false");
                        sto.setIsAddressable(false);
                        RESULT = sto; 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        STO sto = new ConstSTO ("BT", new BoolType(), "true");   
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       
                        STO sto = new ConstSTO (_1);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        STO sto = new ConstSTO (_1, new FloatType(), Float.parseFloat(_1));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

                        STO sto = new ConstSTO(_1, new IntType(), Integer.parseInt(_1, 10));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                         RESULT = ((MyParser) parser).DoUnaryExpr(_1, new IncDecOp("a"+_2));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Arrow (_1,_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1,_2);  
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr(_2, new IncDecOp("b"+_1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoTypeCast(_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOf(_2,_4); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOf(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr(_1, new UnaryBoolOp("!"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr(_2, new UnarySignOp(_1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAddressOf(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDereference(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Relation ::= T_GTE 
            {
              String RESULT = null;
		
                        RESULT = ">=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Relation ::= T_LTE 
            {
              String RESULT = null;
		
                        RESULT = "<=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Relation ::= T_GT 
            {
              String RESULT = null;
		
                        RESULT = ">";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Relation ::= T_LT 
            {
              String RESULT = null;
		
                        RESULT = "<";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Equality ::= T_NEQ 
            {
              String RESULT = null;
		
                        RESULT = "!=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Equality ::= T_EQU 
            {
              String RESULT = null;
		
                        RESULT = "==";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

                        if(_2 == "%") {
                            RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ModOp(_2), _3);
                        } else {
                            RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ArithmeticOp(_2), _3);
                        }
                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ArithmeticOp(_2), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ComparisonOp(_2), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new EqOp(_2), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BitwiseOp("&"), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BitwiseOp("^"), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BitwiseOp("|"), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BooleanOp("&&"), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BooleanOp("||"), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // UnarySign ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // UnarySign ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OptExprList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WritePair ::= T_ENDL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO("endl");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // WritePair ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        ((MyParser) parser).DoWriteStmt(_2);
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WritePairList ::= WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        ((MyParser) parser).DoWriteStmt(_1);
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       //
                   
              CUP$parser$result = new java_cup.runtime.Symbol(22/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoCin(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ReturnStmt ::= T_RETURN Expr NT$31 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$31
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$31 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
                        if(((MyParser) parser).m_symtab.getFunc() != null) {
                          ((MyParser) parser).addReturnSTO(_2);
                            ((MyParser) parser).DoReturnStmt(_2);
                        }
                        RESULT = _2; 
                     
              CUP$parser$result = new java_cup.runtime.Symbol(112/*NT$31*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ReturnStmt ::= T_RETURN NT$30 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$30
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$30 ::= 
            {
              Object RESULT = null;
 
                       if(((MyParser) parser).m_symtab.getFunc() != null) {
                            ((MyParser) parser).addReturnSTO(new ExprSTO(null, new VoidType()));
                            ((MyParser) parser).DoReturnStmt(new ExprSTO(null, new VoidType()));
                    }

                    
              CUP$parser$result = new java_cup.runtime.Symbol(111/*NT$30*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExitStmt ::= T_EXIT T_LPAREN Expr NT$29 T_RPAREN T_SEMI 
            {
              STO RESULT = null;
              // propagate RESULT from NT$29
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$29 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(110/*NT$29*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ContinueStmt ::= T_CONTINUE NT$28 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$28
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$28 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoLoopStmtCheck("continue");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(109/*NT$28*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BreakStmt ::= T_BREAK NT$27 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$27 ::= 
            {
              Object RESULT = null;
 
                        ((MyParser) parser).DoLoopStmtCheck("break");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(108/*NT$27*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$26 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).loopStack.pop();
                        ((MyParser) parser).DoEndLoop();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$26 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _4 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).loopStack.push(new ExprSTO("foreach"));
                        ((MyParser) parser).DoForEachCheck(new VarSTO(_3, _2, _4),_5);
                        //((MyParser) parser).DoVarDecl (null, _3, _2);
                        ((MyParser) parser).DoForEachStmt(_2, _4, _3, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WhileStmt ::= T_WHILE NT$24 Expr NT$25 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).loopStack.pop();
                        ((MyParser) parser).DoEndLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$25 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
  
                        ((MyParser) parser).DoBoolExpr(_1);
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).loopStack.push(new ExprSTO("while"));
                        ((MyParser) parser).DoLoopCheck(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$24 ::= 
            {
              Object RESULT = null;

                        //TODO: might need to reorder
                        ((MyParser) parser).DoWhileStmt();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IfStmt ::= T_IF Expr NT$22 CodeBlock NT$23 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        ((MyParser) parser).EndIfBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$23 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).DoElseBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$22 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBoolExpr(_1);
                        ((MyParser) parser).DoIfStmt(_1);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DeleteStmt ::= T_DELETE Designator NT$21 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$21 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                    ((MyParser) parser).DoDeleteStmt(_1);
                
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NewStmt ::= T_NEW Designator OptCtorCall NT$20 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$20 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoNewStmt(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CtorCall ::= T_COLON T_LPAREN OptExprList NT$19 T_RPAREN 
            {
              Vector RESULT = null;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Vector) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(77/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$19 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptCtorCall ::= 
            {
              Vector RESULT = null;
		
                        RESULT = null;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OptInit ::= 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO(null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OptRef ::= 
            {
              Boolean RESULT = null;
		
                        RESULT = false;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptRef ::= T_AMPERSAND 
            {
              Boolean RESULT = null;
		  
                        RESULT = true;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        if(_4 != null) {
                            ArrayType ary = ((MyParser) parser).VectorToArrayType(_4, _1);
                            STO arySTO = new VarSTO(_3, ary, _2);
                            arySTO.setIsModifiable(false);
                            RESULT = arySTO;
                        } else {
                            RESULT = new VarSTO(_3, _1, _2);
                        }  
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       ((MyParser) parser).DoExitStmt (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        if(_2 instanceof STO) RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        if(_2 instanceof STO) RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptStmtList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(67/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        RESULT = _1; 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CodeBlock ::= T_LBRACE NT$17 OptStmtList NT$18 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$18 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBlockClose(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$17 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Array ::= T_LBRACKET ConstExpr NT$16 T_RBRACKET 
            {
              STO RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT = ((MyParser) parser).checkArrayExpr(_1); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		   
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OptArrayList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).hadAryExprError = false;
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Pointer ::= T_STAR 
            {
              Type RESULT = null;
		
                        RESULT = new PointerType(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PointerList ::= PointerList Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PointerList ::= Pointer 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OptPointerList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OptPointerList ::= PointerList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = new VoidType(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new BoolType(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new FloatType();  
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new IntType();  
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        
                        RESULT = ((MyParser) parser).VectorToPointerType(_2, _1);    
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).VectorToPointerType(_2, _1); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$14 T_LPAREN OptParamList T_RPAREN NT$15 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFuncExternDecl(_1, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$11 T_LPAREN OptParamList T_RPAREN NT$12 T_LBRACE OptStmtList NT$13 T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(((MyParser) parser).m_symtab.getFunc() != null) {
                            
                            if(!((MyParser) parser).m_symtab.getFunc().hadOverload) {
                                ((MyParser) parser).DoNeedsReturnStmts();
                                //((MyParser) parser).DoFuncExitStmts();
                                ((MyParser) parser).wipeReturnStmts();
                                //((MyParser) parser).wipeExitStmts();
                            }

                            RESULT = ((MyParser) parser).m_symtab.getFunc();
                            ((MyParser) parser).DoFuncDecl_2();
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3, _2, _1, _4);

                        if(((MyParser) parser).m_symtab.getStruct() != null) {
                            ((MyParser) parser).DoAddFieldFunc(((MyParser) parser).m_symtab.getFunc());
                        }

                        if(((MyParser) parser).m_symtab.getFunc() != null) {
                            ((MyParser) parser).DoFormalParams(_4, _1);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$11 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FieldFuncDecl ::= FuncDef 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_1 != null && _2 != null) {
                            RESULT = _1;
                            RESULT.addElement (_2);
                        }   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FieldFuncsList ::= FieldFuncDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OptFieldFuncsList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DtorDef ::= T_TILDE T_ID_U NT$10 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        if(!((MyParser) parser).m_symtab.getFunc().hadOverload) {
                                ((MyParser) parser).DoNeedsReturnStmts();
                        }

                        RESULT = ((MyParser) parser).m_symtab.getFunc();
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3, false, new VoidType(), new Vector());
                        ((MyParser) parser).DoAddDTor(((MyParser) parser).m_symtab.getFunc());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDef ::= T_ID_U NT$8 T_LPAREN OptParamList T_RPAREN NT$9 T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(!((MyParser) parser).m_symtab.getFunc().hadOverload) {
                                ((MyParser) parser).DoNeedsReturnStmts();
                        }

                        RESULT = ((MyParser) parser).m_symtab.getFunc();
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3, false, new VoidType(), _4);
                        ((MyParser) parser).DoAddCTor(((MyParser) parser).m_symtab.getFunc());
                        ((MyParser) parser).DoFormalParams(_4, new VoidType());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$8 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CtorDtorDecl ::= DtorDef 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CtorDtorDecl ::= CtorDef 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CtorDtorList ::= CtorDtorDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OptCtorDtorList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OptCtorDtorList ::= CtorDtorList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(_3 != null) {
                            ArrayType ary = ((MyParser) parser).VectorToArrayType(_3, _1);
                            RESULT = new ConstSTO(_2, ary);
                        } else {
                            RESULT = new VarSTO(_2, _1);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                        ((MyParser) parser).DoAddFieldVar(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldVarsList ::= FieldVarDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                        ((MyParser) parser).DoAddFieldVar(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$5 FieldVarsList OptCtorDtorList NT$6 OptFieldFuncsList NT$7 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
                        ((MyParser) parser).DoStructdefDecl_2 ();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoDefaultCtor();
                        ((MyParser) parser).DoDefaultDtor();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoStructdefDecl_1 (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OptStatic ::= 
            {
              String RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptStatic ::= T_STATIC 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = "static";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoConstDecl (_1, _3, _2, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;


                        ArrayType aryTyp = null;
                        ConstSTO arySTO = null;
                        if(_4 != null) {
                            Vector<STO> arys = _4; 
                            arySTO = ((ConstSTO) (arys.firstElement()));
                            Vector<STO> arySTOVec = new Vector();
                            arySTOVec.addElement(arySTO); 
                            aryTyp = ((MyParser) parser).VectorToArrayType(arySTOVec, _2);
                        }

                        STO cTorVar;
                        if(_4 != null) {
                            cTorVar = ((MyParser) parser).DoVarDecl (_1, _3, _4, _2);
                        } else {
                            cTorVar = ((MyParser) parser).DoVarDecl (_1, _3, _2);
                        }

                       ((MyParser) parser).DoStructVarDecl(_4, _2, _5, _3, cTorVar,aryTyp, arySTO);                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(_4 != null) {
                            ((MyParser) parser).DoVarDecl (_1, _3, _4, _2);
                        } else {
                            ((MyParser) parser).DoVarDecl (_1, _3, _2, _5);
                        }  
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(_4 != null) {
                           ((MyParser) parser).DoExternDecl (_3, _4, _2);
                        } else {
                            ((MyParser) parser).DoExternDecl (_3, _2);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

