
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
// CSE 131 Reduced-C Compiler Project
// Copyright (C) 2008-2015 Garo Bournoutian and Rick Ord
// University of California, San Diego
//--------------------------------------------------------------------

parser code 
{::};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
terminal
    T_NEW,
    T_DELETE,
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STRUCTDEF,
    T_THIS,
    T_TILDE,
    T_TRUE,
    T_WHILE,
    T_VOID
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID,
    T_STATIC,
    T_ENDL
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal
    NewStmt,
    DeleteStmt,    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    StructdefDecl,
    Stmt,
    CodeBlock,
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt
    ;

non terminal String    
    AddOp,
    MulOp,
    Relation,
    Equality,
    IncDecOp,
    UnarySign,
    OptStatic
    ;

non terminal Boolean
    OptRef
    ;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Array,
    OptInit,
    ParamDecl,
    FieldVarDecl,
    ConstExpr,
    Designator,
    Designator2,
    Designator3,
    FuncDef,
    FieldFuncDecl,
    CtorDef,
    DtorDef,
    CtorDtorDecl,
    WritePair,
    ExitStmt
    ;

non terminal Type
    BasicType,
    DecoratedBasicType,
    StructType,
    Type,
    DecoratedType,
    ReturnType,
    Pointer
    ;

non terminal Vector
    OptParamList,
    ParamList,
    OptExprList,
    ExprList,
    OptStmtList, //Holds a vector of various types of statments
    StmtList,
    OptArrayList,
    ArrayList,
    FieldVarsList,
    FieldFuncsList,
    OptFieldFuncsList,
    OptCtorDtorList,
    CtorDtorList,
    OptCtorCall,
    CtorCall,
    OptPointerList,
    PointerList,
    WritePairList
    ;
//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=         {:
                        ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                        ((MyParser) parser).DoProgramEnd();
                    :}
    ;


OptGlobalDecls ::=  GlobalDecls
    |               /* empty */
    ;


GlobalDecls ::=     GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=      ExternDecl
    |               VarDecl
    |               ConstDecl
    |               StructdefDecl
    |               FuncDecl
    |               FuncDef
    ;


ExternDecl ::=      T_EXTERN DecoratedBasicType:_2 T_ID:_3 OptArrayList:_4
                    {:
                        if(_4 != null) {
                           ((MyParser) parser).DoExternDecl (_3, _4, _2);
                        } else {
                            ((MyParser) parser).DoExternDecl (_3, _2);
                        }
                    :}
                    T_SEMI
    ;

VarDecl ::=         OptStatic:_1 DecoratedType:_2 T_ID:_3 OptArrayList:_4 OptInit:_5
                    {:
                        if(_4 != null) {
                            ((MyParser) parser).DoVarDecl (_1, _3, _4, _2);
                        } else {
                            ((MyParser) parser).DoVarDecl (_1, _3, _2, _5);
                        }  
                    :}
                    T_SEMI
    |               OptStatic:_1 StructType:_2 T_ID:_3 OptArrayList:_4 OptCtorCall:_5
                    {:

                        ArrayType aryTyp = null;
                        ConstSTO arySTO = null;
                        if(_4 != null) {
                            Vector<STO> arys = _4; 
                            arySTO = ((ConstSTO) (arys.firstElement()));
                            Vector<STO> arySTOVec = new Vector();
                            arySTOVec.addElement(arySTO); 
                            aryTyp = ((MyParser) parser).VectorToArrayType(arySTOVec, _2);
                        }

                        STO cTorVar;
                        if(_4 != null) {
                            cTorVar = ((MyParser) parser).DoVarDecl (_1, _3, _4, _2);
                        } else {
                            cTorVar = ((MyParser) parser).DoVarDecl (_1, _3, _2);
                        }

                       ((MyParser) parser).DoStructVarDecl(_4, _2, _5, _3, cTorVar,aryTyp, arySTO);                        
                    :}
                    T_SEMI
    ;


ConstDecl ::=       OptStatic:_1 T_CONST BasicType:_2 T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:
                        ((MyParser) parser).DoConstDecl (_1, _3, _2, _5);
                    :} 
                    T_SEMI
    ;


OptStatic ::=       T_STATIC:_1 
                    {:
                        RESULT = "static";
                    :}       
    |               {::}/* empty */
    ;


StructdefDecl ::=   T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoStructdefDecl_1 (_1);
                    :}
                    FieldVarsList:_3
                    OptCtorDtorList:_5 {:
                        ((MyParser) parser).DoDefaultCtor();
                        ((MyParser) parser).DoDefaultDtor();
                    :}
                    OptFieldFuncsList:_4
                    {: 
                        ((MyParser) parser).DoStructdefDecl_2 ();
                    :}
                    T_RBRACE T_SEMI
    ;


FieldVarsList ::=   FieldVarDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                        ((MyParser) parser).DoAddFieldVar(_2);
                    :}
    |               FieldVarsList:_1 FieldVarDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                        ((MyParser) parser).DoAddFieldVar(_2);
                    :}
    ;


FieldVarDecl ::=    DecoratedType:_1 T_ID:_2 OptArrayList:_3 T_SEMI
                    {:
                        if(_3 != null) {
                            ArrayType ary = ((MyParser) parser).VectorToArrayType(_3, _1);
                            RESULT = new ConstSTO(_2, ary);
                        } else {
                            RESULT = new VarSTO(_2, _1);
                        }
                    :}
    ;


OptCtorDtorList ::= CtorDtorList:_1 
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


CtorDtorList ::=    CtorDtorDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               CtorDtorList:_1 CtorDtorDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


CtorDtorDecl ::=    CtorDef:_1
                    {:
                        RESULT = _1;
                    :}
    |               DtorDef:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


CtorDef ::=         T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3, false, new VoidType(), _4);
                        ((MyParser) parser).DoAddCTor(((MyParser) parser).m_symtab.getFunc());
                        ((MyParser) parser).DoFormalParams(_4, new VoidType());
                    :}
                    T_LBRACE OptStmtList:_1 T_RBRACE
                    {:
                        if(!((MyParser) parser).m_symtab.getFunc().hadOverload) {
                                ((MyParser) parser).DoNeedsReturnStmts();
                        }

                        RESULT = ((MyParser) parser).m_symtab.getFunc();
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


DtorDef ::=         T_TILDE T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3, false, new VoidType(), new Vector());
                        ((MyParser) parser).DoAddDTor(((MyParser) parser).m_symtab.getFunc());
                    :}
                    T_LPAREN T_RPAREN T_LBRACE OptStmtList:_1 T_RBRACE
                    {:

                        if(!((MyParser) parser).m_symtab.getFunc().hadOverload) {
                                ((MyParser) parser).DoNeedsReturnStmts();
                        }

                        RESULT = ((MyParser) parser).m_symtab.getFunc();
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


OptFieldFuncsList ::= FieldFuncsList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


FieldFuncsList ::=  FieldFuncDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               FieldFuncsList:_1 FieldFuncDecl:_2 
                    {:
                        if(_1 != null && _2 != null) {
                            RESULT = _1;
                            RESULT.addElement (_2);
                        }   
                    :}
    ;


FieldFuncDecl ::=   FuncDef:_1 
                    {:
                        RESULT = _1;
                    :}
    ;

FuncDef ::=         T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                    :}
                    T_LPAREN OptParamList:_4  T_RPAREN
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3, _2, _1, _4);

                        if(((MyParser) parser).m_symtab.getStruct() != null) {
                            ((MyParser) parser).DoAddFieldFunc(((MyParser) parser).m_symtab.getFunc());
                        }

                        if(((MyParser) parser).m_symtab.getFunc() != null) {
                            ((MyParser) parser).DoFormalParams(_4, _1);
                        }
                    :}
                    T_LBRACE OptStmtList:_5
                    {:
                        if(((MyParser) parser).m_symtab.getFunc() != null) {
                            
                            if(!((MyParser) parser).m_symtab.getFunc().hadOverload) {
                                ((MyParser) parser).DoNeedsReturnStmts();
                                //((MyParser) parser).DoFuncExitStmts();
                                ((MyParser) parser).wipeReturnStmts();
                                //((MyParser) parser).wipeExitStmts();
                            }

                            RESULT = ((MyParser) parser).m_symtab.getFunc();
                            ((MyParser) parser).DoFuncDecl_2();
                        }
                    :}
                    T_RBRACE
    ;

FuncDecl ::=        T_EXTERN:_2 T_FUNCTION T_COLON ReturnType:_1 T_ID:_3
                    {:
                       
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFuncExternDecl(_1, _3, _4);
                    :}
                    T_SEMI
    ;

Type ::=            DecoratedType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1
                    {:
                        RESULT = _1;
                    :}
    ;


DecoratedType ::=   DecoratedBasicType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1 PointerList:_2
                    {:
                        RESULT = ((MyParser) parser).VectorToPointerType(_2, _1); 
                    :}
    ;


DecoratedBasicType ::= BasicType:_1 OptPointerList:_2
                    {:
                        
                        RESULT = ((MyParser) parser).VectorToPointerType(_2, _1);    
                    :}
    ;


BasicType ::=       T_INT
                    {:
                        RESULT = new IntType();  
                    :}
    |               T_FLOAT
                    {:
                        RESULT = new FloatType();  
                    :}
    |               T_BOOL
                    {:
                        RESULT = new BoolType(); 
                    :}
    ;


StructType ::=      T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    :}
    ;


ReturnType ::=      Type:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_VOID 
                    {:
                        RESULT = new VoidType(); 
                    :}
    ;


OptPointerList ::=  PointerList:_1 
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;

PointerList ::=     Pointer:_2 
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               PointerList:_1 Pointer:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


Pointer ::=         T_STAR 
                    {:
                        RESULT = new PointerType(); 
                    :}
    ;


OptArrayList ::=    ArrayList:_1 
                    {:
                        ((MyParser) parser).hadAryExprError = false;
                        RESULT = _1;
                    :}
    |               /* empty */
    ;

ArrayList ::=       Array:_2 
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}

    |               ArrayList:_1 Array:_2 
                    {:   
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;

Array ::=           T_LBRACKET ConstExpr:_1 
                    {:
                        RESULT = ((MyParser) parser).checkArrayExpr(_1); 
                    :}
                    T_RBRACKET 
    ;

CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen();
                    :}
                    OptStmtList:_1
                    {:
                        ((MyParser) parser).DoBlockClose(); 
                    :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList:_1 
                    {: 
                        RESULT = _1; 
                    :}
    |               /* empty */
    ;


StmtList ::=        Stmt:_2
                    {:
                        RESULT = new Vector ();
                        if(_2 instanceof STO) RESULT.addElement (_2);
                    :} 
    |               StmtList:_1 Stmt:_2     
                    {:
                        RESULT = _1;
                        if(_2 instanceof STO) RESULT.addElement (_2);
                    :}
    ;


Stmt ::=            VarDecl
    |               ConstDecl
    |               CodeBlock
    |               Expr T_SEMI
    |               NewStmt
    |               DeleteStmt
    |               IfStmt
    |               WhileStmt
    |               ForeachStmt
    |               BreakStmt:_1 
                    {:
                        RESULT = _1;
                    :}
    |               ContinueStmt:_1
                    {:
                        RESULT = _1;
                    :}
    |               ExitStmt:_1
                    {:
                       ((MyParser) parser).DoExitStmt (_1);
                    :}
    |               ReturnStmt
    |               ReadStmt
    |               WriteStmt
    ;


OptParamList ::=    ParamList:_1 
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


ParamList ::=       ParamDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               ParamList:_1 T_COMMA ParamDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


ParamDecl ::=       Type:_1 OptRef:_2 T_ID:_3 OptArrayList:_4
                    {: 
                        if(_4 != null) {
                            ArrayType ary = ((MyParser) parser).VectorToArrayType(_4, _1);
                            STO arySTO = new VarSTO(_3, ary, _2);
                            arySTO.setIsModifiable(false);
                            RESULT = arySTO;
                        } else {
                            RESULT = new VarSTO(_3, _1, _2);
                        }  
                    :}
                    ;


OptRef ::=          T_AMPERSAND
                    {:  
                        RESULT = true;
                    :}
    |               {:
                        RESULT = false;
                    :}
    ;


OptInit ::=         T_ASSIGN Expr:_1
                    {:
                        RESULT = _1;
                    :}
    |               {:
                        RESULT = new ExprSTO(null);
                    :}
    ;


OptCtorCall ::=     CtorCall:_1
                    {:
                        RESULT = _1;
                    :}
    |               {:
                        RESULT = null;
                    :} 
    ;


CtorCall ::=        T_COLON T_LPAREN OptExprList:_1
                    {:
                        RESULT = _1;
                    :}
                     T_RPAREN
    ;

NewStmt ::=         T_NEW Designator:_1 OptCtorCall:_2 
                    {:
                        ((MyParser) parser).DoNewStmt(_1, _2);
                    :}
                    T_SEMI 
    ;

DeleteStmt ::= T_DELETE Designator:_1 
                {:
                    ((MyParser) parser).DoDeleteStmt(_1);
                :} 
                T_SEMI 
    ;

IfStmt ::=          T_IF Expr:_1    
                    {:
                        ((MyParser) parser).DoBoolExpr(_1);
                        ((MyParser) parser).DoIfStmt(_1);

                    :}
                    CodeBlock
                    {:
                        ((MyParser) parser).DoElseBlock();
                    :}
                    OptElse
                    {:
                        ((MyParser) parser).EndIfBlock();
                    :}

    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE
                    {:
                        //TODO: might need to reorder
                        ((MyParser) parser).DoWhileStmt();

                    :}
                    Expr:_1
                    {:  
                        ((MyParser) parser).DoBoolExpr(_1);
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).loopStack.push(new ExprSTO("while"));
                        ((MyParser) parser).DoLoopCheck(_1);
                    :}
                    CodeBlock 
                    {: 
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).loopStack.pop();
                        ((MyParser) parser).DoEndLoop();
                    :}
     
    ;

ForeachStmt ::=     T_FOREACH T_LPAREN Type:_2 OptRef:_4 T_ID:_3 T_COLON Expr:_5 T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).loopStack.push(new ExprSTO("foreach"));
                        ((MyParser) parser).DoForEachCheck(new VarSTO(_3, _2, _4),_5);
                        //((MyParser) parser).DoVarDecl (null, _3, _2);
                        ((MyParser) parser).DoForEachStmt(_2, _4, _3, _5);
                    :}
                    CodeBlock
                    {:
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).loopStack.pop();
                        ((MyParser) parser).DoEndLoop();

                    :}
    ;


BreakStmt ::=       T_BREAK
                    {: 
                        ((MyParser) parser).DoLoopStmtCheck("break");
                    :}
                    T_SEMI
    ;


ContinueStmt ::=    T_CONTINUE 
                    {:
                         ((MyParser) parser).DoLoopStmtCheck("continue");
                    :}
                    T_SEMI
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 
                    {:
                        RESULT = _1;
                    :} T_RPAREN T_SEMI
    ;


ReturnStmt ::=      T_RETURN 
                    {: 
                       if(((MyParser) parser).m_symtab.getFunc() != null) {
                            ((MyParser) parser).addReturnSTO(new ExprSTO(null, new VoidType()));
                            ((MyParser) parser).DoReturnStmt(new ExprSTO(null, new VoidType()));
                    }

                    :} T_SEMI
    |               T_RETURN Expr:_2
                     {: 
                        if(((MyParser) parser).m_symtab.getFunc() != null) {
                          ((MyParser) parser).addReturnSTO(_2);
                            ((MyParser) parser).DoReturnStmt(_2);
                        }
                        RESULT = _2; 
                     :} T_SEMI
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator:_1 T_SEMI
                    {:
                        ((MyParser) parser).DoCin(_1);
                    :}
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList:_1 T_SEMI
                   {:
                       //
                   :}
    ;


WritePairList ::=   WritePair:_1
                    {:
                        RESULT = new Vector ();
                        ((MyParser) parser).DoWriteStmt(_1);
                        RESULT.addElement (_1);
                    :}
    |               WritePairList:_1 T_OSTREAM WritePair:_2
                    {:
                        RESULT = _1;
                        ((MyParser) parser).DoWriteStmt(_2);
                        RESULT.addElement(_2);
                    :}
    ;


WritePair ::=       Expr:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_ENDL:_1
                    {:
                        RESULT = new ConstSTO("endl");
                    :}
    ;


ConstExpr ::=       Expr:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


OptExprList ::=     ExprList:_1 
                    {:
                        RESULT = _1;
                    :}
    |               
                    {:
                        RESULT = new Vector();
                    :}
    ;


ExprList ::=        Expr:_2
                    {: 
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               ExprList:_1 T_COMMA Expr:_2
                    {: 
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;

UnarySign ::=       T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;

Expr ::=            Designator:_1 T_ASSIGN Expr:_2
                    {:
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    :}
    |               Expr0:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr0 ::=           Expr0:_1 T_OR:_2 Expr1:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BooleanOp("||"), _3);
                    :}
    |               Expr1:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr1 ::=           Expr1:_1 T_AND:_2 Expr2:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BooleanOp("&&"), _3);
                    :}
    |               Expr2:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr2 ::=           Expr2:_1 T_BAR:_2 Expr3:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BitwiseOp("|"), _3);
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=           Expr3:_1 T_CARET:_2 Expr4:_3
                    {:
                       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BitwiseOp("^"), _3);
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=           Expr4:_1 T_AMPERSAND:_2 Expr5:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BitwiseOp("&"), _3);
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new EqOp(_2), _3);
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ComparisonOp(_2), _3);
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ArithmeticOp(_2), _3);
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=           Expr8:_1 MulOp:_2 Designator:_3
                    {:

                        if(_2 == "%") {
                            RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ModOp(_2), _3);
                        } else {
                            RESULT = ((MyParser) parser).DoBinaryExpr(_1, new ArithmeticOp(_2), _3);
                        }
                       
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;

Equality ::=        T_EQU 
                    {:
                        RESULT = "==";
                    :}
    |               T_NEQ 
                    {:
                        RESULT = "!=";
                    :}
    ;


Relation ::=        T_LT
                    {:
                        RESULT = "<";
                    :}
    |               T_GT
                    {:
                        RESULT = ">";
                    :}
    |               T_LTE
                    {:
                        RESULT = "<=";
                    :}
    |               T_GTE
                    {:
                        RESULT = ">=";
                    :}
    ;


AddOp ::=           T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;


MulOp ::=           T_STAR
                    {:
                        RESULT = "*";
                    :}
    |               T_SLASH
                    {:
                        RESULT = "/";
                    :}
    |               T_MOD
                    {:
                        RESULT = "%";
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = "++";
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = "--";
                    :}
    ;

Designator ::=      T_STAR Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoDereference(_1);
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoAddressOf(_1);
                    :}
    |               UnarySign:_1 Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr(_2, new UnarySignOp(_1));
                    :}
    |               T_NOT Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr(_1, new UnaryBoolOp("!"));
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeOf(_2);
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 OptArrayList:_4 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeOf(_2,_4); 
                    :}
    |               T_LPAREN DecoratedType:_1 T_RPAREN Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoTypeCast(_1,_2);
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr(_2, new IncDecOp("b"+_1));
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_2 T_RBRACKET
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1,_2);  
                    :}
    |               Designator2:_1 T_ARROW T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Arrow (_1,_3);
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                         RESULT = ((MyParser) parser).DoUnaryExpr(_1, new IncDecOp("a"+_2));
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_4 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _4);
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;

Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:

                        STO sto = new ConstSTO(_1, new IntType(), Integer.parseInt(_1, 10));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        STO sto = new ConstSTO (_1, new FloatType(), Float.parseFloat(_1));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_STR_LITERAL:_1
                    {:
                       
                        STO sto = new ConstSTO (_1);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_TRUE
                    {:
                        STO sto = new ConstSTO ("BT", new BoolType(), "true");   
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_FALSE
                    {:
                        STO sto = new ConstSTO ("BF", new BoolType(), "false");
                        sto.setIsAddressable(false);
                        RESULT = sto; 
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ExprSTO ("nullptr", new NullPointerType());   
                    :}
    |               T_THIS
                    {:
                        if(((MyParser) parser).m_symtab.getStruct() != null) {
                            RESULT = ((MyParser) parser).m_symtab.getStruct();
                        } else {
                            RESULT = new ErrorSTO("STRUCT_NOT_DECLARED");
                        }
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    :}
    ;